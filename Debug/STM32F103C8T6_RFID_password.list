
STM32F103C8T6_RFID_password.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000625c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  08006418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000098c  200000fc  08006514  000200fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a88  08006514  00020a88  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b61c  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003652  00000000  00000000  0003b741  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010c8  00000000  00000000  0003ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f50  00000000  00000000  0003fe60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000082e5  00000000  00000000  00040db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004a02  00000000  00000000  00049095  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004da97  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000044d4  00000000  00000000  0004db14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08006350 	.word	0x08006350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08006350 	.word	0x08006350

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4a08      	ldr	r2, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f923 	bl	80003b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f005 fb3a 	bl	80057f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000190:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <HAL_InitTick+0x30>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a09      	ldr	r2, [pc, #36]	; (80001bc <HAL_InitTick+0x34>)
 8000196:	fba2 2303 	umull	r2, r3, r2, r3
 800019a:	099b      	lsrs	r3, r3, #6
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f940 	bl	8000422 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001a2:	2200      	movs	r2, #0
 80001a4:	6879      	ldr	r1, [r7, #4]
 80001a6:	f04f 30ff 	mov.w	r0, #4294967295
 80001aa:	f000 f910 	bl	80003ce <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80001ae:	2300      	movs	r3, #0
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	10624dd3 	.word	0x10624dd3

080001c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
  uwTick++;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <HAL_IncTick+0x18>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3301      	adds	r3, #1
 80001ca:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x18>)
 80001cc:	6013      	str	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000134 	.word	0x20000134

080001dc <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  return uwTick;
 80001e0:	4b02      	ldr	r3, [pc, #8]	; (80001ec <HAL_GetTick+0x10>)
 80001e2:	681b      	ldr	r3, [r3, #0]
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	20000134 	.word	0x20000134

080001f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001f8:	f7ff fff0 	bl	80001dc <HAL_GetTick>
 80001fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000208:	d002      	beq.n	8000210 <HAL_Delay+0x20>
  {
     wait++;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	3301      	adds	r3, #1
 800020e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000210:	bf00      	nop
 8000212:	f7ff ffe3 	bl	80001dc <HAL_GetTick>
 8000216:	4602      	mov	r2, r0
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	1ad2      	subs	r2, r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	429a      	cmp	r2, r3
 8000220:	d3f7      	bcc.n	8000212 <HAL_Delay+0x22>
  {
  }
}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f003 0307 	and.w	r3, r3, #7
 800023a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <NVIC_SetPriorityGrouping+0x44>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800025e:	4a04      	ldr	r2, [pc, #16]	; (8000270 <NVIC_SetPriorityGrouping+0x44>)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	60d3      	str	r3, [r2, #12]
}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <NVIC_GetPriorityGrouping+0x18>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	0a1b      	lsrs	r3, r3, #8
 800027e:	f003 0307 	and.w	r3, r3, #7
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029a:	4908      	ldr	r1, [pc, #32]	; (80002bc <NVIC_EnableIRQ+0x2c>)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	095b      	lsrs	r3, r3, #5
 80002a2:	79fa      	ldrb	r2, [r7, #7]
 80002a4:	f002 021f 	and.w	r2, r2, #31
 80002a8:	2001      	movs	r0, #1
 80002aa:	fa00 f202 	lsl.w	r2, r0, r2
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	da0b      	bge.n	80002ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	490d      	ldr	r1, [pc, #52]	; (800030c <NVIC_SetPriority+0x4c>)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f003 030f 	and.w	r3, r3, #15
 80002dc:	3b04      	subs	r3, #4
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	0112      	lsls	r2, r2, #4
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	440b      	add	r3, r1
 80002e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ea:	e009      	b.n	8000300 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ec:	4908      	ldr	r1, [pc, #32]	; (8000310 <NVIC_SetPriority+0x50>)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	b2d2      	uxtb	r2, r2
 80002f6:	0112      	lsls	r2, r2, #4
 80002f8:	b2d2      	uxtb	r2, r2
 80002fa:	440b      	add	r3, r1
 80002fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000314:	b480      	push	{r7}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	f1c3 0307 	rsb	r3, r3, #7
 800032e:	2b04      	cmp	r3, #4
 8000330:	bf28      	it	cs
 8000332:	2304      	movcs	r3, #4
 8000334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3304      	adds	r3, #4
 800033a:	2b06      	cmp	r3, #6
 800033c:	d902      	bls.n	8000344 <NVIC_EncodePriority+0x30>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b03      	subs	r3, #3
 8000342:	e000      	b.n	8000346 <NVIC_EncodePriority+0x32>
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	2201      	movs	r2, #1
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	fa02 f303 	lsl.w	r3, r2, r3
 8000350:	1e5a      	subs	r2, r3, #1
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	401a      	ands	r2, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800035a:	2101      	movs	r1, #1
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	1e59      	subs	r1, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000368:	4313      	orrs	r3, r2
         );
}
 800036a:	4618      	mov	r0, r3
 800036c:	3724      	adds	r7, #36	; 0x24
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000384:	d301      	bcc.n	800038a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000386:	2301      	movs	r3, #1
 8000388:	e00f      	b.n	80003aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <SysTick_Config+0x40>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000392:	210f      	movs	r1, #15
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f7ff ff92 	bl	80002c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <SysTick_Config+0x40>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SysTick_Config+0x40>)
 80003a4:	2207      	movs	r2, #7
 80003a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000e010 	.word	0xe000e010

080003b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff33 	bl	800022c <NVIC_SetPriorityGrouping>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	4603      	mov	r3, r0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003e0:	f7ff ff48 	bl	8000274 <NVIC_GetPriorityGrouping>
 80003e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff92 	bl	8000314 <NVIC_EncodePriority>
 80003f0:	4602      	mov	r2, r0
 80003f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff61 	bl	80002c0 <NVIC_SetPriority>
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff3b 	bl	8000290 <NVIC_EnableIRQ>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f7ff ffa2 	bl	8000374 <SysTick_Config>
 8000430:	4603      	mov	r3, r0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b04      	cmp	r3, #4
 8000448:	d106      	bne.n	8000458 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000456:	e005      	b.n	8000464 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000458:	4a05      	ldr	r2, [pc, #20]	; (8000470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f023 0304 	bic.w	r3, r3, #4
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e000e010 	.word	0xe000e010

08000474 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000478:	f000 f802 	bl	8000480 <HAL_SYSTICK_Callback>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d005      	beq.n	80004ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2204      	movs	r2, #4
 80004a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	e057      	b.n	800055e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	f022 020e 	bic.w	r2, r2, #14
 80004bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	6812      	ldr	r2, [r2, #0]
 80004c6:	6812      	ldr	r2, [r2, #0]
 80004c8:	f022 0201 	bic.w	r2, r2, #1
 80004cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004ce:	4a26      	ldr	r2, [pc, #152]	; (8000568 <HAL_DMA_Abort_IT+0xdc>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	4b25      	ldr	r3, [pc, #148]	; (800056c <HAL_DMA_Abort_IT+0xe0>)
 80004d8:	4299      	cmp	r1, r3
 80004da:	d02e      	beq.n	800053a <HAL_DMA_Abort_IT+0xae>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <HAL_DMA_Abort_IT+0xe4>)
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d026      	beq.n	8000536 <HAL_DMA_Abort_IT+0xaa>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <HAL_DMA_Abort_IT+0xe8>)
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d01d      	beq.n	8000530 <HAL_DMA_Abort_IT+0xa4>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <HAL_DMA_Abort_IT+0xec>)
 80004fc:	4299      	cmp	r1, r3
 80004fe:	d014      	beq.n	800052a <HAL_DMA_Abort_IT+0x9e>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <HAL_DMA_Abort_IT+0xf0>)
 8000508:	4299      	cmp	r1, r3
 800050a:	d00b      	beq.n	8000524 <HAL_DMA_Abort_IT+0x98>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <HAL_DMA_Abort_IT+0xf4>)
 8000514:	4299      	cmp	r1, r3
 8000516:	d102      	bne.n	800051e <HAL_DMA_Abort_IT+0x92>
 8000518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800051c:	e00e      	b.n	800053c <HAL_DMA_Abort_IT+0xb0>
 800051e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000522:	e00b      	b.n	800053c <HAL_DMA_Abort_IT+0xb0>
 8000524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000528:	e008      	b.n	800053c <HAL_DMA_Abort_IT+0xb0>
 800052a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052e:	e005      	b.n	800053c <HAL_DMA_Abort_IT+0xb0>
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	e002      	b.n	800053c <HAL_DMA_Abort_IT+0xb0>
 8000536:	2310      	movs	r3, #16
 8000538:	e000      	b.n	800053c <HAL_DMA_Abort_IT+0xb0>
 800053a:	2301      	movs	r3, #1
 800053c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2201      	movs	r2, #1
 8000542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000552:	2b00      	cmp	r3, #0
 8000554:	d003      	beq.n	800055e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	4798      	blx	r3
    } 
  }
  return status;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020000 	.word	0x40020000
 800056c:	40020008 	.word	0x40020008
 8000570:	4002001c 	.word	0x4002001c
 8000574:	40020030 	.word	0x40020030
 8000578:	40020044 	.word	0x40020044
 800057c:	40020058 	.word	0x40020058
 8000580:	4002006c 	.word	0x4002006c

08000584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
 80005a6:	e127      	b.n	80007f8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80005a8:	2201      	movs	r2, #1
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	4013      	ands	r3, r2
 80005ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80005bc:	69ba      	ldr	r2, [r7, #24]
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	f040 8116 	bne.w	80007f2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	2b12      	cmp	r3, #18
 80005cc:	d034      	beq.n	8000638 <HAL_GPIO_Init+0xb4>
 80005ce:	2b12      	cmp	r3, #18
 80005d0:	d80d      	bhi.n	80005ee <HAL_GPIO_Init+0x6a>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d02b      	beq.n	800062e <HAL_GPIO_Init+0xaa>
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d804      	bhi.n	80005e4 <HAL_GPIO_Init+0x60>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d031      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d01c      	beq.n	800061c <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80005e2:	e048      	b.n	8000676 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d043      	beq.n	8000670 <HAL_GPIO_Init+0xec>
 80005e8:	2b11      	cmp	r3, #17
 80005ea:	d01b      	beq.n	8000624 <HAL_GPIO_Init+0xa0>
          break;
 80005ec:	e043      	b.n	8000676 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005ee:	4a87      	ldr	r2, [pc, #540]	; (800080c <HAL_GPIO_Init+0x288>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d026      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
 80005f4:	4a85      	ldr	r2, [pc, #532]	; (800080c <HAL_GPIO_Init+0x288>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d806      	bhi.n	8000608 <HAL_GPIO_Init+0x84>
 80005fa:	4a85      	ldr	r2, [pc, #532]	; (8000810 <HAL_GPIO_Init+0x28c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d020      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
 8000600:	4a84      	ldr	r2, [pc, #528]	; (8000814 <HAL_GPIO_Init+0x290>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d01d      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
          break;
 8000606:	e036      	b.n	8000676 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000608:	4a83      	ldr	r2, [pc, #524]	; (8000818 <HAL_GPIO_Init+0x294>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d019      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
 800060e:	4a83      	ldr	r2, [pc, #524]	; (800081c <HAL_GPIO_Init+0x298>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d016      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
 8000614:	4a82      	ldr	r2, [pc, #520]	; (8000820 <HAL_GPIO_Init+0x29c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d013      	beq.n	8000642 <HAL_GPIO_Init+0xbe>
          break;
 800061a:	e02c      	b.n	8000676 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	623b      	str	r3, [r7, #32]
          break;
 8000622:	e028      	b.n	8000676 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	3304      	adds	r3, #4
 800062a:	623b      	str	r3, [r7, #32]
          break;
 800062c:	e023      	b.n	8000676 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	3308      	adds	r3, #8
 8000634:	623b      	str	r3, [r7, #32]
          break;
 8000636:	e01e      	b.n	8000676 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	330c      	adds	r3, #12
 800063e:	623b      	str	r3, [r7, #32]
          break;
 8000640:	e019      	b.n	8000676 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800064a:	2304      	movs	r3, #4
 800064c:	623b      	str	r3, [r7, #32]
          break; 
 800064e:	e012      	b.n	8000676 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d105      	bne.n	8000664 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000658:	2308      	movs	r3, #8
 800065a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	69fa      	ldr	r2, [r7, #28]
 8000660:	611a      	str	r2, [r3, #16]
          break; 
 8000662:	e008      	b.n	8000676 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000664:	2308      	movs	r3, #8
 8000666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	69fa      	ldr	r2, [r7, #28]
 800066c:	615a      	str	r2, [r3, #20]
          break; 
 800066e:	e002      	b.n	8000676 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
          break;
 8000674:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2bff      	cmp	r3, #255	; 0xff
 800067a:	d801      	bhi.n	8000680 <HAL_GPIO_Init+0xfc>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	e001      	b.n	8000684 <HAL_GPIO_Init+0x100>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3304      	adds	r3, #4
 8000684:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	d802      	bhi.n	8000692 <HAL_GPIO_Init+0x10e>
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	e002      	b.n	8000698 <HAL_GPIO_Init+0x114>
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	3b08      	subs	r3, #8
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	210f      	movs	r1, #15
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43db      	mvns	r3, r3
 80006a8:	401a      	ands	r2, r3
 80006aa:	6a39      	ldr	r1, [r7, #32]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	431a      	orrs	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f000 8096 	beq.w	80007f2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4a57      	ldr	r2, [pc, #348]	; (8000824 <HAL_GPIO_Init+0x2a0>)
 80006c8:	4b56      	ldr	r3, [pc, #344]	; (8000824 <HAL_GPIO_Init+0x2a0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b54      	ldr	r3, [pc, #336]	; (8000824 <HAL_GPIO_Init+0x2a0>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80006de:	4a52      	ldr	r2, [pc, #328]	; (8000828 <HAL_GPIO_Init+0x2a4>)
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	3302      	adds	r3, #2
 80006e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ea:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	220f      	movs	r2, #15
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	4013      	ands	r3, r2
 8000700:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a49      	ldr	r2, [pc, #292]	; (800082c <HAL_GPIO_Init+0x2a8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d013      	beq.n	8000732 <HAL_GPIO_Init+0x1ae>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a48      	ldr	r2, [pc, #288]	; (8000830 <HAL_GPIO_Init+0x2ac>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d00d      	beq.n	800072e <HAL_GPIO_Init+0x1aa>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a47      	ldr	r2, [pc, #284]	; (8000834 <HAL_GPIO_Init+0x2b0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d007      	beq.n	800072a <HAL_GPIO_Init+0x1a6>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a46      	ldr	r2, [pc, #280]	; (8000838 <HAL_GPIO_Init+0x2b4>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_GPIO_Init+0x1a2>
 8000722:	2303      	movs	r3, #3
 8000724:	e006      	b.n	8000734 <HAL_GPIO_Init+0x1b0>
 8000726:	2304      	movs	r3, #4
 8000728:	e004      	b.n	8000734 <HAL_GPIO_Init+0x1b0>
 800072a:	2302      	movs	r3, #2
 800072c:	e002      	b.n	8000734 <HAL_GPIO_Init+0x1b0>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <HAL_GPIO_Init+0x1b0>
 8000732:	2300      	movs	r3, #0
 8000734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000736:	f002 0203 	and.w	r2, r2, #3
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	4093      	lsls	r3, r2
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	4313      	orrs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000744:	4938      	ldr	r1, [pc, #224]	; (8000828 <HAL_GPIO_Init+0x2a4>)
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	3302      	adds	r3, #2
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d006      	beq.n	800076c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800075e:	4937      	ldr	r1, [pc, #220]	; (800083c <HAL_GPIO_Init+0x2b8>)
 8000760:	4b36      	ldr	r3, [pc, #216]	; (800083c <HAL_GPIO_Init+0x2b8>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	4313      	orrs	r3, r2
 8000768:	600b      	str	r3, [r1, #0]
 800076a:	e006      	b.n	800077a <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800076c:	4933      	ldr	r1, [pc, #204]	; (800083c <HAL_GPIO_Init+0x2b8>)
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <HAL_GPIO_Init+0x2b8>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	43db      	mvns	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000786:	492d      	ldr	r1, [pc, #180]	; (800083c <HAL_GPIO_Init+0x2b8>)
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <HAL_GPIO_Init+0x2b8>)
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	4313      	orrs	r3, r2
 8000790:	604b      	str	r3, [r1, #4]
 8000792:	e006      	b.n	80007a2 <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000794:	4929      	ldr	r1, [pc, #164]	; (800083c <HAL_GPIO_Init+0x2b8>)
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <HAL_GPIO_Init+0x2b8>)
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	43db      	mvns	r3, r3
 800079e:	4013      	ands	r3, r2
 80007a0:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d006      	beq.n	80007bc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80007ae:	4923      	ldr	r1, [pc, #140]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	608b      	str	r3, [r1, #8]
 80007ba:	e006      	b.n	80007ca <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80007bc:	491f      	ldr	r1, [pc, #124]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4013      	ands	r3, r2
 80007c8:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80007d6:	4919      	ldr	r1, [pc, #100]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	4313      	orrs	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
 80007e2:	e006      	b.n	80007f2 <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80007e4:	4915      	ldr	r1, [pc, #84]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_GPIO_Init+0x2b8>)
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	43db      	mvns	r3, r3
 80007ee:	4013      	ands	r3, r2
 80007f0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f4:	3301      	adds	r3, #1
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
 80007f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	f67f aed4 	bls.w	80005a8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000800:	bf00      	nop
 8000802:	372c      	adds	r7, #44	; 0x2c
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	10210000 	.word	0x10210000
 8000810:	10110000 	.word	0x10110000
 8000814:	10120000 	.word	0x10120000
 8000818:	10310000 	.word	0x10310000
 800081c:	10320000 	.word	0x10320000
 8000820:	10220000 	.word	0x10220000
 8000824:	40021000 	.word	0x40021000
 8000828:	40010000 	.word	0x40010000
 800082c:	40010800 	.word	0x40010800
 8000830:	40010c00 	.word	0x40010c00
 8000834:	40011000 	.word	0x40011000
 8000838:	40011400 	.word	0x40011400
 800083c:	40010400 	.word	0x40010400

08000840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	807b      	strh	r3, [r7, #2]
 800084c:	4613      	mov	r3, r2
 800084e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000850:	787b      	ldrb	r3, [r7, #1]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000856:	887a      	ldrh	r2, [r7, #2]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800085c:	e003      	b.n	8000866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800085e:	887b      	ldrh	r3, [r7, #2]
 8000860:	041a      	lsls	r2, r3, #16
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af06      	add	r7, sp, #24
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e0ca      	b.n	8000a1c <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d106      	bne.n	80008a0 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f005 f944 	bl	8005b28 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2203      	movs	r2, #3
 80008a4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 fc49 	bl	8003144 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	687e      	ldr	r6, [r7, #4]
 80008ba:	466d      	mov	r5, sp
 80008bc:	f106 0410 	add.w	r4, r6, #16
 80008c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	602b      	str	r3, [r5, #0]
 80008c8:	1d33      	adds	r3, r6, #4
 80008ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008cc:	6838      	ldr	r0, [r7, #0]
 80008ce:	f002 fc0f 	bl	80030f0 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fc4f 	bl	800317c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e037      	b.n	8000954 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	015b      	lsls	r3, r3, #5
 80008ea:	4413      	add	r3, r2
 80008ec:	3329      	adds	r3, #41	; 0x29
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	b2d9      	uxtb	r1, r3
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	4413      	add	r3, r2
 80008fe:	3328      	adds	r3, #40	; 0x28
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	b299      	uxth	r1, r3
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	015b      	lsls	r3, r3, #5
 800090e:	4413      	add	r3, r2
 8000910:	3334      	adds	r3, #52	; 0x34
 8000912:	460a      	mov	r2, r1
 8000914:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	015b      	lsls	r3, r3, #5
 800091c:	4413      	add	r3, r2
 800091e:	332b      	adds	r3, #43	; 0x2b
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	015b      	lsls	r3, r3, #5
 800092a:	4413      	add	r3, r2
 800092c:	3338      	adds	r3, #56	; 0x38
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	015b      	lsls	r3, r3, #5
 8000938:	4413      	add	r3, r2
 800093a:	333c      	adds	r3, #60	; 0x3c
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3302      	adds	r3, #2
 8000946:	015b      	lsls	r3, r3, #5
 8000948:	4413      	add	r3, r2
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b0e      	cmp	r3, #14
 8000958:	d9c4      	bls.n	80008e4 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e03c      	b.n	80009da <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	015b      	lsls	r3, r3, #5
 8000966:	4413      	add	r3, r2
 8000968:	f203 2329 	addw	r3, r3, #553	; 0x229
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	b2d9      	uxtb	r1, r3
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	015b      	lsls	r3, r3, #5
 800097a:	4413      	add	r3, r2
 800097c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000980:	460a      	mov	r2, r1
 8000982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	b299      	uxth	r1, r3
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	015b      	lsls	r3, r3, #5
 800098e:	4413      	add	r3, r2
 8000990:	3334      	adds	r3, #52	; 0x34
 8000992:	460a      	mov	r2, r1
 8000994:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	015b      	lsls	r3, r3, #5
 800099c:	4413      	add	r3, r2
 800099e:	f203 232b 	addw	r3, r3, #555	; 0x22b
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	015b      	lsls	r3, r3, #5
 80009ac:	4413      	add	r3, r2
 80009ae:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	015b      	lsls	r3, r3, #5
 80009bc:	4413      	add	r3, r2
 80009be:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3312      	adds	r3, #18
 80009cc:	015b      	lsls	r3, r3, #5
 80009ce:	4413      	add	r3, r2
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b0e      	cmp	r3, #14
 80009de:	d9bf      	bls.n	8000960 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	687e      	ldr	r6, [r7, #4]
 80009e8:	466d      	mov	r5, sp
 80009ea:	f106 0410 	add.w	r4, r6, #16
 80009ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	602b      	str	r3, [r5, #0]
 80009f6:	1d33      	adds	r3, r6, #4
 80009f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009fa:	6838      	ldr	r0, [r7, #0]
 80009fc:	f002 fbca 	bl	8003194 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 fbb4 	bl	8004182 <USB_DevDisconnect>
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a24 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d101      	bne.n	8000a3a <HAL_PCD_Start+0x16>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e016      	b.n	8000a68 <HAL_PCD_Start+0x44>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000a42:	2101      	movs	r1, #1
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f005 fb76 	bl	8006136 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fb8d 	bl	800416e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fb59 	bl	8003110 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fb8a 	bl	8004196 <USB_ReadInterrupts>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a8c:	d102      	bne.n	8000a94 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 fac4 	bl	800101c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fb7c 	bl	8004196 <USB_ReadInterrupts>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa8:	d112      	bne.n	8000ad0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000abc:	b292      	uxth	r2, r2
 8000abe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f005 f8a5 	bl	8005c12 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f8d2 	bl	8000c74 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fb5e 	bl	8004196 <USB_ReadInterrupts>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ae4:	d10b      	bne.n	8000afe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000af2:	b292      	uxth	r2, r2
 8000af4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000af8:	b292      	uxth	r2, r2
 8000afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fb47 	bl	8004196 <USB_ReadInterrupts>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b12:	d10b      	bne.n	8000b2c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000b20:	b292      	uxth	r2, r2
 8000b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b26:	b292      	uxth	r2, r2
 8000b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fb30 	bl	8004196 <USB_ReadInterrupts>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b40:	d126      	bne.n	8000b90 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000b4e:	b292      	uxth	r2, r2
 8000b50:	f022 0204 	bic.w	r2, r2, #4
 8000b54:	b292      	uxth	r2, r2
 8000b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000b66:	b292      	uxth	r2, r2
 8000b68:	f022 0208 	bic.w	r2, r2, #8
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f005 f88a 	bl	8005c8c <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000b84:	b292      	uxth	r2, r2
 8000b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b8a:	b292      	uxth	r2, r2
 8000b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fafe 	bl	8004196 <USB_ReadInterrupts>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba4:	d131      	bne.n	8000c0a <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	f042 0208 	orr.w	r2, r2, #8
 8000bb8:	b292      	uxth	r2, r2
 8000bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000bca:	b292      	uxth	r2, r2
 8000bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bd0:	b292      	uxth	r2, r2
 8000bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000be2:	b292      	uxth	r2, r2
 8000be4:	f042 0204 	orr.w	r2, r2, #4
 8000be8:	b292      	uxth	r2, r2
 8000bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 facf 	bl	8004196 <USB_ReadInterrupts>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c02:	d002      	beq.n	8000c0a <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f005 f827 	bl	8005c58 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fac1 	bl	8004196 <USB_ReadInterrupts>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c1e:	d10e      	bne.n	8000c3e <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c32:	b292      	uxth	r2, r2
 8000c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f004 ffdc 	bl	8005bf6 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 faa7 	bl	8004196 <USB_ReadInterrupts>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c52:	d10b      	bne.n	8000c6c <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000c60:	b292      	uxth	r2, r2
 8000c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c66:	b292      	uxth	r2, r2
 8000c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <HAL_PCD_SetAddress+0x1a>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e013      	b.n	8000cb6 <HAL_PCD_SetAddress+0x42>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	78fa      	ldrb	r2, [r7, #3]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 fa4e 	bl	8004148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	4611      	mov	r1, r2
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4603      	mov	r3, r0
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	803b      	strh	r3, [r7, #0]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da08      	bge.n	8000cfa <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cee:	015b      	lsls	r3, r3, #5
 8000cf0:	3328      	adds	r3, #40	; 0x28
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e008      	b.n	8000d0c <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d00:	015b      	lsls	r3, r3, #5
 8000d02:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	09db      	lsrs	r3, r3, #7
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8000d28:	883a      	ldrh	r2, [r7, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	78ba      	ldrb	r2, [r7, #2]
 8000d32:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d101      	bne.n	8000d42 <HAL_PCD_EP_Open+0x84>
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e00e      	b.n	8000d60 <HAL_PCD_EP_Open+0xa2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fa43 	bl	80031dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	da08      	bge.n	8000d92 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d86:	015b      	lsls	r3, r3, #5
 8000d88:	3328      	adds	r3, #40	; 0x28
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e008      	b.n	8000da4 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d98:	015b      	lsls	r3, r3, #5
 8000d9a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	09db      	lsrs	r3, r3, #7
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_PCD_EP_Close+0x66>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e00e      	b.n	8000dec <HAL_PCD_EP_Close+0x84>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68f9      	ldr	r1, [r7, #12]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fcbf 	bl	8003760 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	460b      	mov	r3, r1
 8000e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e0e:	015b      	lsls	r3, r3, #5
 8000e10:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8000e32:	7afb      	ldrb	r3, [r7, #11]
 8000e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d106      	bne.n	8000e56 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6979      	ldr	r1, [r7, #20]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fe0e 	bl	8003a70 <USB_EPStartXfer>
 8000e54:	e005      	b.n	8000e62 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6979      	ldr	r1, [r7, #20]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fe07 	bl	8003a70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e86:	015b      	lsls	r3, r3, #5
 8000e88:	3328      	adds	r3, #40	; 0x28
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8000ea8:	7afb      	ldrb	r3, [r7, #11]
 8000eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6979      	ldr	r1, [r7, #20]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fdd3 	bl	8003a70 <USB_EPStartXfer>
 8000eca:	e005      	b.n	8000ed8 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6979      	ldr	r1, [r7, #20]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fdcc 	bl	8003a70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8000ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da08      	bge.n	8000f0c <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f00:	015b      	lsls	r3, r3, #5
 8000f02:	3328      	adds	r3, #40	; 0x28
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e006      	b.n	8000f1a <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	015b      	lsls	r3, r3, #5
 8000f10:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	09db      	lsrs	r3, r3, #7
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_PCD_EP_SetStall+0x68>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e01c      	b.n	8000f84 <HAL_PCD_EP_SetStall+0xa2>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68f9      	ldr	r1, [r7, #12]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 f80b 	bl	8003f74 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d108      	bne.n	8000f7a <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8000f72:	4619      	mov	r1, r3
 8000f74:	4610      	mov	r0, r2
 8000f76:	f003 f91f 	bl	80041b8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8000f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da08      	bge.n	8000fb6 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000faa:	015b      	lsls	r3, r3, #5
 8000fac:	3328      	adds	r3, #40	; 0x28
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e006      	b.n	8000fc4 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	09db      	lsrs	r3, r3, #7
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_PCD_EP_ClrStall+0x68>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e00e      	b.n	8001012 <HAL_PCD_EP_ClrStall+0x86>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	f003 f816 	bl	8004034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	83fb      	strh	r3, [r7, #30]
  uint8_t epindex = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]
  __IO uint16_t wIstr = 0;  
 8001030:	2300      	movs	r3, #0
 8001032:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001038:	e308      	b.n	800164c <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	b29b      	uxth	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	75fb      	strb	r3, [r7, #23]
    
    if (epindex == 0)
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f040 812a 	bne.w	80012a2 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	b29b      	uxth	r3, r3
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d14d      	bne.n	80010f6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800106a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800106e:	b29b      	uxth	r3, r3
 8001070:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3328      	adds	r3, #40	; 0x28
 8001076:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001080:	b29b      	uxth	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	3302      	adds	r3, #2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	4413      	add	r3, r2
 8001096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	441a      	add	r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010b4:	2100      	movs	r1, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f004 fd86 	bl	8005bc8 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 82c1 	beq.w	800164c <PCD_EP_ISR_Handler+0x630>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 82bc 	bne.w	800164c <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	b292      	uxth	r2, r2
 80010e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010f4:	e2aa      	b.n	800164c <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80010fc:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001108:	89bb      	ldrh	r3, [r7, #12]
 800110a:	b29b      	uxth	r3, r3
 800110c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001110:	2b00      	cmp	r3, #0
 8001112:	d031      	beq.n	8001178 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	3306      	adds	r3, #6
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	4413      	add	r3, r2
 8001132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	889a      	ldrh	r2, [r3, #4]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	b29b      	uxth	r3, r3
 8001156:	f003 f880 	bl	800425a <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	b299      	uxth	r1, r3
 8001166:	f640 738f 	movw	r3, #3983	; 0xf8f
 800116a:	400b      	ands	r3, r1
 800116c:	b29b      	uxth	r3, r3
 800116e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f004 fcff 	bl	8005b74 <HAL_PCD_SetupStageCallback>
 8001176:	e269      	b.n	800164c <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001178:	89bb      	ldrh	r3, [r7, #12]
 800117a:	b29b      	uxth	r3, r3
 800117c:	b21b      	sxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	f280 8264 	bge.w	800164c <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b299      	uxth	r1, r3
 8001190:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001194:	400b      	ands	r3, r1
 8001196:	b29b      	uxth	r3, r3
 8001198:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	3306      	adds	r3, #6
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d011      	beq.n	80011f4 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6959      	ldr	r1, [r3, #20]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	889a      	ldrh	r2, [r3, #4]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f003 f83a 	bl	800425a <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	695a      	ldr	r2, [r3, #20]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	441a      	add	r2, r3
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011f4:	2100      	movs	r1, #0
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f004 fcce 	bl	8005b98 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001204:	b29b      	uxth	r3, r3
 8001206:	3306      	adds	r3, #6
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	4413      	add	r3, r2
 8001210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b3e      	cmp	r3, #62	; 0x3e
 800121c:	d918      	bls.n	8001250 <PCD_EP_ISR_Handler+0x234>
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	83bb      	strh	r3, [r7, #28]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <PCD_EP_ISR_Handler+0x21c>
 8001232:	8bbb      	ldrh	r3, [r7, #28]
 8001234:	3b01      	subs	r3, #1
 8001236:	83bb      	strh	r3, [r7, #28]
 8001238:	8bbb      	ldrh	r3, [r7, #28]
 800123a:	029b      	lsls	r3, r3, #10
 800123c:	b29b      	uxth	r3, r3
 800123e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e012      	b.n	8001276 <PCD_EP_ISR_Handler+0x25a>
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	83bb      	strh	r3, [r7, #28]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <PCD_EP_ISR_Handler+0x24e>
 8001264:	8bbb      	ldrh	r3, [r7, #28]
 8001266:	3301      	adds	r3, #1
 8001268:	83bb      	strh	r3, [r7, #28]
 800126a:	8bbb      	ldrh	r3, [r7, #28]
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	b29b      	uxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001286:	b29c      	uxth	r4, r3
 8001288:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800128c:	b29c      	uxth	r4, r3
 800128e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001292:	b29c      	uxth	r4, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b98      	ldr	r3, [pc, #608]	; (80014fc <PCD_EP_ISR_Handler+0x4e0>)
 800129a:	4323      	orrs	r3, r4
 800129c:	b29b      	uxth	r3, r3
 800129e:	8013      	strh	r3, [r2, #0]
 80012a0:	e1d4      	b.n	800164c <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f280 80d0 	bge.w	8001460 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	441a      	add	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b299      	uxth	r1, r3
 80012dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012e0:	400b      	ands	r3, r1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	7a9b      	ldrb	r3, [r3, #10]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d122      	bne.n	8001342 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001304:	b29b      	uxth	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	3306      	adds	r3, #6
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	4413      	add	r3, r2
 800131a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001326:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001328:	8bfb      	ldrh	r3, [r7, #30]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d073      	beq.n	8001416 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6959      	ldr	r1, [r3, #20]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	889a      	ldrh	r2, [r3, #4]
 800133a:	8bfb      	ldrh	r3, [r7, #30]
 800133c:	f002 ff8d 	bl	800425a <USB_ReadPMA>
 8001340:	e069      	b.n	8001416 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d022      	beq.n	80013a2 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	3302      	adds	r3, #2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	4413      	add	r3, r2
 800137a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001386:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001388:	8bfb      	ldrh	r3, [r7, #30]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d02b      	beq.n	80013e6 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	6959      	ldr	r1, [r3, #20]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	88da      	ldrh	r2, [r3, #6]
 800139a:	8bfb      	ldrh	r3, [r7, #30]
 800139c:	f002 ff5d 	bl	800425a <USB_ReadPMA>
 80013a0:	e021      	b.n	80013e6 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	3306      	adds	r3, #6
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013cc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80013ce:	8bfb      	ldrh	r3, [r7, #30]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6959      	ldr	r1, [r3, #20]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	891a      	ldrh	r2, [r3, #8]
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	f002 ff3a 	bl	800425a <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	441a      	add	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	b299      	uxth	r1, r3
 8001406:	f640 730f 	movw	r3, #3855	; 0xf0f
 800140a:	400b      	ands	r3, r1
 800140c:	b299      	uxth	r1, r3
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <PCD_EP_ISR_Handler+0x4e4>)
 8001410:	430b      	orrs	r3, r1
 8001412:	b29b      	uxth	r3, r3
 8001414:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	8bfb      	ldrh	r3, [r7, #30]
 800141c:	441a      	add	r2, r3
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	8bfb      	ldrh	r3, [r7, #30]
 8001428:	441a      	add	r2, r3
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d004      	beq.n	8001440 <PCD_EP_ISR_Handler+0x424>
 8001436:	8bfa      	ldrh	r2, [r7, #30]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d206      	bcs.n	800144e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f004 fba6 	bl	8005b98 <HAL_PCD_DataOutStageCallback>
 800144c:	e008      	b.n	8001460 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	7819      	ldrb	r1, [r3, #0]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fcca 	bl	8000df4 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001460:	89bb      	ldrh	r3, [r7, #12]
 8001462:	b29b      	uxth	r3, r3
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80ef 	beq.w	800164c <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	3328      	adds	r3, #40	; 0x28
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	441a      	add	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800149a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800149e:	b29b      	uxth	r3, r3
 80014a0:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	7a9b      	ldrb	r3, [r3, #10]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d12c      	bne.n	8001504 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	3302      	adds	r3, #2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8083 	beq.w	80015e8 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6959      	ldr	r1, [r3, #20]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	889a      	ldrh	r2, [r3, #4]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f002 fe6b 	bl	80041ce <USB_WritePMA>
 80014f8:	e076      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5cc>
 80014fa:	bf00      	nop
 80014fc:	ffff8080 	.word	0xffff8080
 8001500:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d026      	beq.n	800156c <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	3302      	adds	r3, #2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d031      	beq.n	80015b8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6959      	ldr	r1, [r3, #20]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	88da      	ldrh	r2, [r3, #6]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	b29b      	uxth	r3, r3
 8001566:	f002 fe32 	bl	80041ce <USB_WritePMA>
 800156a:	e025      	b.n	80015b8 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	3306      	adds	r3, #6
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6959      	ldr	r1, [r3, #20]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	891a      	ldrh	r2, [r3, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f002 fe0b 	bl	80041ce <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	441a      	add	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b299      	uxth	r1, r3
 80015d8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80015dc:	400b      	ands	r3, r1
 80015de:	b299      	uxth	r1, r3
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <PCD_EP_ISR_Handler+0x650>)
 80015e2:	430b      	orrs	r3, r1
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	3302      	adds	r3, #2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	441a      	add	r2, r3
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f004 fac8 	bl	8005bc8 <HAL_PCD_DataInStageCallback>
 8001638:	e008      	b.n	800164c <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	7819      	ldrb	r1, [r3, #0]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fc10 	bl	8000e6c <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	81fa      	strh	r2, [r7, #14]
 800165a:	b21b      	sxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	f6ff acec 	blt.w	800103a <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	ffffc080 	.word	0xffffc080

08001670 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	817b      	strh	r3, [r7, #10]
 800167e:	4613      	mov	r3, r2
 8001680:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001686:	897b      	ldrh	r3, [r7, #10]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001690:	897b      	ldrh	r3, [r7, #10]
 8001692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	3328      	adds	r3, #40	; 0x28
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e006      	b.n	80016b0 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016a2:	897b      	ldrh	r3, [r7, #10]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	809a      	strh	r2, [r3, #4]
 80016c4:	e00b      	b.n	80016de <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2201      	movs	r2, #1
 80016ca:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	b29a      	uxth	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8087 	beq.w	8001814 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001706:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d00c      	beq.n	800172c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001712:	4b8f      	ldr	r3, [pc, #572]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d112      	bne.n	8001744 <HAL_RCC_OscConfig+0x58>
 800171e:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d10b      	bne.n	8001744 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d06c      	beq.n	8001812 <HAL_RCC_OscConfig+0x126>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d168      	bne.n	8001812 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e22d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x70>
 800174e:	4a80      	ldr	r2, [pc, #512]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001750:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e02e      	b.n	80017ba <HAL_RCC_OscConfig+0xce>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x92>
 8001764:	4a7a      	ldr	r2, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4a77      	ldr	r2, [pc, #476]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001772:	4b77      	ldr	r3, [pc, #476]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e01d      	b.n	80017ba <HAL_RCC_OscConfig+0xce>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001786:	d10c      	bne.n	80017a2 <HAL_RCC_OscConfig+0xb6>
 8001788:	4a71      	ldr	r2, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800178a:	4b71      	ldr	r3, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001796:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e00b      	b.n	80017ba <HAL_RCC_OscConfig+0xce>
 80017a2:	4a6b      	ldr	r2, [pc, #428]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4a68      	ldr	r2, [pc, #416]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d013      	beq.n	80017ea <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7fe fd0b 	bl	80001dc <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ca:	f7fe fd07 	bl	80001dc <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1e1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017dc:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0xde>
 80017e8:	e014      	b.n	8001814 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7fe fcf7 	bl	80001dc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f2:	f7fe fcf3 	bl	80001dc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	; 0x64
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1cd      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001804:	4b52      	ldr	r3, [pc, #328]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x106>
 8001810:	e000      	b.n	8001814 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001812:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d063      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800182c:	4b48      	ldr	r3, [pc, #288]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d11c      	bne.n	8001872 <HAL_RCC_OscConfig+0x186>
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d116      	bne.n	8001872 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x170>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e1a1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	493c      	ldr	r1, [pc, #240]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001870:	e03a      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d020      	beq.n	80018bc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x268>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe fcac 	bl	80001dc <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001888:	f7fe fca8 	bl	80001dc <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e182      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	492a      	ldr	r1, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x268>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7fe fc8b 	bl	80001dc <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7fe fc87 	bl	80001dc <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e161      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d039      	beq.n	8001968 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d019      	beq.n	8001930 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7fe fc6b 	bl	80001dc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7fe fc67 	bl	80001dc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e141      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_RCC_OscConfig+0x264>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 facb 	bl	8001ec4 <RCC_Delay>
 800192e:	e01b      	b.n	8001968 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7fe fc51 	bl	80001dc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	e00e      	b.n	800195c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7fe fc4d 	bl	80001dc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d907      	bls.n	800195c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e127      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
 8001950:	40021000 	.word	0x40021000
 8001954:	42420000 	.word	0x42420000
 8001958:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ea      	bne.n	800193e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a6 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4a88      	ldr	r2, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001988:	4b87      	ldr	r3, [pc, #540]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b82      	ldr	r3, [pc, #520]	; (8001bac <HAL_RCC_OscConfig+0x4c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4a7f      	ldr	r2, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x4c0>)
 80019b0:	4b7e      	ldr	r3, [pc, #504]	; (8001bac <HAL_RCC_OscConfig+0x4c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7fe fc0f 	bl	80001dc <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7fe fc0b 	bl	80001dc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0e5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x30a>
 80019e8:	4a6f      	ldr	r2, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 80019ea:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_OscConfig+0x366>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x32c>
 80019fe:	4a6a      	ldr	r2, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a00:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4a67      	ldr	r2, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a0c:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x366>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x34e>
 8001a20:	4a61      	ldr	r2, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a22:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	4a5e      	ldr	r2, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x366>
 8001a3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a48:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fbbf 	bl	80001dc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7fe fbbb 	bl	80001dc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e093      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x376>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7fe fba9 	bl	80001dc <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7fe fba5 	bl	80001dc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e07d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d069      	beq.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aca:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d061      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d146      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe fb7a 	bl	80001dc <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7fe fb76 	bl	80001dc <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e050      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d108      	bne.n	8001b26 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b14:	4924      	ldr	r1, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b26:	4820      	ldr	r0, [pc, #128]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a19      	ldr	r1, [r3, #32]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe fb4a 	bl	80001dc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7fe fb46 	bl	80001dc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e020      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x460>
 8001b6a:	e018      	b.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7fe fb33 	bl	80001dc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7fe fb2f 	bl	80001dc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_OscConfig+0x4bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x48e>
 8001b98:	e001      	b.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	42420060 	.word	0x42420060

08001bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d210      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd0:	496e      	ldr	r1, [pc, #440]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0207 	and.w	r2, r3, #7
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0c8      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfe:	4964      	ldr	r1, [pc, #400]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c00:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d06a      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d115      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0a7      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e09b      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e093      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	494c      	ldr	r1, [pc, #304]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe fab5 	bl	80001dc <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d112      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7fe faad 	bl	80001dc <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e077      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xca>
 8001ca0:	e027      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d11d      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7fe fa96 	bl	80001dc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e060      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc2:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d1ee      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
 8001cce:	e010      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7fe fa84 	bl	80001dc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e04e      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ee      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d910      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d00:	4922      	ldr	r1, [pc, #136]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_RCC_ClockConfig+0x1d8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0207 	and.w	r2, r3, #7
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e030      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2e:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4c:	4910      	ldr	r1, [pc, #64]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d60:	f000 f81c 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d64:	4601      	mov	r1, r0
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x1dc>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_RCC_ClockConfig+0x1e0>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	fa21 f303 	lsr.w	r3, r1, r3
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_RCC_ClockConfig+0x1e4>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7fe fa03 	bl	8000188 <HAL_InitTick>
  
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080063f8 	.word	0x080063f8
 8001d98:	200000c4 	.word	0x200000c4

08001d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	b490      	push	{r4, r7}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001da4:	1d3c      	adds	r4, r7, #4
 8001da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x40>
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dda:	e02d      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dde:	623b      	str	r3, [r7, #32]
      break;
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	0c9b      	lsrs	r3, r3, #18
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dee:	4413      	add	r3, r2
 8001df0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001df4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c5b      	lsrs	r3, r3, #17
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e0e:	4413      	add	r3, r2
 8001e10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e14:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	e004      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	623b      	str	r3, [r7, #32]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3a:	623b      	str	r3, [r7, #32]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc90      	pop	{r4, r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08006368 	.word	0x08006368
 8001e50:	08006378 	.word	0x08006378
 8001e54:	40021000 	.word	0x40021000
 8001e58:	007a1200 	.word	0x007a1200
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	200000c4 	.word	0x200000c4

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08006408 	.word	0x08006408

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08006408 	.word	0x08006408

08001ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <RCC_Delay+0x34>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <RCC_Delay+0x38>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0a5b      	lsrs	r3, r3, #9
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ee0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <RCC_Delay+0x1c>
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200000c4 	.word	0x200000c4
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d07d      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	61d3      	str	r3, [r2, #28]
 8001f38:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d118      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f54:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f60:	f7fe f93c 	bl	80001dc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	e008      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe f938 	bl	80001dc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e06d      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d02e      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d027      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fba:	4a29      	ldr	r2, [pc, #164]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d014      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe f907 	bl	80001dc <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe f903 	bl	80001dc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e036      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ff4:	491a      	ldr	r1, [pc, #104]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002042:	4907      	ldr	r1, [pc, #28]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420440 	.word	0x42420440

0800206c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e01d      	b.n	80020ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f003 fbfc 	bl	8005890 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 fa34 	bl	8002518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	68d2      	ldr	r2, [r2, #12]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d122      	bne.n	8002152 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d11b      	bne.n	8002152 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0202 	mvn.w	r2, #2
 8002122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f9d1 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 800213e:	e005      	b.n	800214c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f9c4 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f9d3 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b04      	cmp	r3, #4
 800215e:	d122      	bne.n	80021a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d11b      	bne.n	80021a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f06f 0204 	mvn.w	r2, #4
 8002176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f9a7 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 8002192:	e005      	b.n	80021a0 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f99a 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f9a9 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d122      	bne.n	80021fa <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11b      	bne.n	80021fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0208 	mvn.w	r2, #8
 80021ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2204      	movs	r2, #4
 80021d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f97d 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 80021e6:	e005      	b.n	80021f4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f970 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f97f 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b10      	cmp	r3, #16
 8002206:	d122      	bne.n	800224e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d11b      	bne.n	800224e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0210 	mvn.w	r2, #16
 800221e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2208      	movs	r2, #8
 8002224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f953 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 800223a:	e005      	b.n	8002248 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f946 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f955 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10e      	bne.n	800227a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f06f 0201 	mvn.w	r2, #1
 8002272:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f921 	bl	80024bc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b80      	cmp	r3, #128	; 0x80
 8002286:	d10e      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800229e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fa91 	bl	80027c8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d10e      	bne.n	80022d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d107      	bne.n	80022d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f919 	bl	8002504 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d10e      	bne.n	80022fe <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d107      	bne.n	80022fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f06f 0220 	mvn.w	r2, #32
 80022f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fa5c 	bl	80027b6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_TIM_ConfigClockSource+0x1c>
 800231e:	2302      	movs	r3, #2
 8002320:	e0c8      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x1ae>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002340:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002348:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d077      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x144>
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d80e      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x76>
 800235e:	2b10      	cmp	r3, #16
 8002360:	f000 808a 	beq.w	8002478 <HAL_TIM_ConfigClockSource+0x172>
 8002364:	2b10      	cmp	r3, #16
 8002366:	d802      	bhi.n	800236e <HAL_TIM_ConfigClockSource+0x68>
 8002368:	2b00      	cmp	r3, #0
 800236a:	d07e      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800236c:	e099      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800236e:	2b20      	cmp	r3, #32
 8002370:	f000 8089 	beq.w	8002486 <HAL_TIM_ConfigClockSource+0x180>
 8002374:	2b30      	cmp	r3, #48	; 0x30
 8002376:	f000 808d 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 800237a:	e092      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800237c:	2b70      	cmp	r3, #112	; 0x70
 800237e:	d016      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xa8>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d804      	bhi.n	800238e <HAL_TIM_ConfigClockSource+0x88>
 8002384:	2b50      	cmp	r3, #80	; 0x50
 8002386:	d040      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x104>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d04e      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x124>
    break;
 800238c:	e089      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d003      	beq.n	800239c <HAL_TIM_ConfigClockSource+0x96>
 8002394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002398:	d024      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800239a:	e082      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	6892      	ldr	r2, [r2, #8]
 80023a6:	f022 0207 	bic.w	r2, r2, #7
 80023aa:	609a      	str	r2, [r3, #8]
    break;
 80023ac:	e079      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f000 f995 	bl	80026ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	609a      	str	r2, [r3, #8]
    break;
 80023e2:	e05e      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f000 f97a 	bl	80026ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	6892      	ldr	r2, [r2, #8]
 8002402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002406:	609a      	str	r2, [r3, #8]
    break;
 8002408:	e04b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	f000 f8e4 	bl	80025e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f943 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002428:	e03b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 f906 	bl	8002648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2160      	movs	r1, #96	; 0x60
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f933 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002448:	e02b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8c4 	bl	80025e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f923 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002468:	e01b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f91c 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002476:	e014      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2110      	movs	r1, #16
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f915 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002484:	e00d      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2120      	movs	r1, #32
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f90e 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002492:	e006      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2130      	movs	r1, #48	; 0x30
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f907 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 80024a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <TIM_Base_SetConfig+0xc0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00b      	beq.n	800254c <TIM_Base_SetConfig+0x34>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253a:	d007      	beq.n	800254c <TIM_Base_SetConfig+0x34>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a27      	ldr	r2, [pc, #156]	; (80025dc <TIM_Base_SetConfig+0xc4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0x34>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <TIM_Base_SetConfig+0xc8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <TIM_Base_SetConfig+0xc0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00b      	beq.n	800257e <TIM_Base_SetConfig+0x66>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d007      	beq.n	800257e <TIM_Base_SetConfig+0x66>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <TIM_Base_SetConfig+0xc4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d003      	beq.n	800257e <TIM_Base_SetConfig+0x66>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <TIM_Base_SetConfig+0xc8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d108      	bne.n	8002590 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002596:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <TIM_Base_SetConfig+0xc0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	615a      	str	r2, [r3, #20]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40000800 	.word	0x40000800

080025e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f023 0201 	bic.w	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 030a 	bic.w	r3, r3, #10
 8002628:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 0210 	bic.w	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800267a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800268c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	f043 0307 	orr.w	r3, r3, #7
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002742:	2302      	movs	r3, #2
 8002744:	e032      	b.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6852      	ldr	r2, [r2, #4]
 8002760:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002764:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	6851      	ldr	r1, [r2, #4]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002786:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	6891      	ldr	r1, [r2, #8]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	6852      	ldr	r2, [r2, #4]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e03f      	b.n	800286c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f003 f86b 	bl	80058dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	68d2      	ldr	r2, [r2, #12]
 8002818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb4e 	bl	8002ec0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	6912      	ldr	r2, [r2, #16]
 800282e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002832:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6952      	ldr	r2, [r2, #20]
 800283e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002842:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002852:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 8090 	bne.w	80029b6 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_UART_Receive+0x2e>
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e088      	b.n	80029b8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_UART_Receive+0x40>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e081      	b.n	80029b8 <HAL_UART_Receive+0x144>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2222      	movs	r2, #34	; 0x22
 80028c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028ca:	f7fd fc87 	bl	80001dc <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80028dc:	e05c      	b.n	8002998 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	d12b      	bne.n	800294e <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2120      	movs	r1, #32
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f974 	bl	8002bee <UART_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e053      	b.n	80029b8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002928:	b29a      	uxth	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3302      	adds	r3, #2
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	e030      	b.n	8002998 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b29b      	uxth	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	b29a      	uxth	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3301      	adds	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	e024      	b.n	8002998 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	2120      	movs	r1, #32
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f948 	bl	8002bee <UART_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e027      	b.n	80029b8 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	60ba      	str	r2, [r7, #8]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	6852      	ldr	r2, [r2, #4]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e00a      	b.n	8002998 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	60ba      	str	r2, [r7, #8]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	6852      	ldr	r2, [r2, #4]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d19d      	bne.n	80028de <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_UART_IRQHandler+0x52>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f9d6 	bl	8002dbc <UART_Receive_IT>
      return;
 8002a10:	e0cc      	b.n	8002bac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80ab 	beq.w	8002b70 <HAL_UART_IRQHandler+0x1b0>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_UART_IRQHandler+0x70>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80a0 	beq.w	8002b70 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_UART_IRQHandler+0x90>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_UART_IRQHandler+0xb0>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	f043 0202 	orr.w	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_UART_IRQHandler+0xd0>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xf0>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f043 0208 	orr.w	r2, r3, #8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d078      	beq.n	8002baa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x112>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f975 	bl	8002dbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_UART_IRQHandler+0x13a>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d031      	beq.n	8002b5e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8c1 	bl	8002c82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d023      	beq.n	8002b56 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6952      	ldr	r2, [r2, #20]
 8002b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d013      	beq.n	8002b4e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <HAL_UART_IRQHandler+0x1f4>)
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcaa 	bl	800048c <HAL_DMA_Abort_IT>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e00e      	b.n	8002b6c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f844 	bl	8002bdc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	e00a      	b.n	8002b6c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f840 	bl	8002bdc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5c:	e006      	b.n	8002b6c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f83c 	bl	8002bdc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b6a:	e01e      	b.n	8002baa <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	bf00      	nop
    return;
 8002b6e:	e01c      	b.n	8002baa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_UART_IRQHandler+0x1cc>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8ad 	bl	8002ce4 <UART_Transmit_IT>
    return;
 8002b8a:	e00f      	b.n	8002bac <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_UART_IRQHandler+0x1ec>
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8f3 	bl	8002d8c <UART_EndTransmit_IT>
    return;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <HAL_UART_IRQHandler+0x1ec>
    return;
 8002baa:	bf00      	nop
  }
}
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	08002cbd 	.word	0x08002cbd

08002bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002bfe:	e02c      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d028      	beq.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c0e:	f7fd fae5 	bl	80001dc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d91d      	bls.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	68d2      	ldr	r2, [r2, #12]
 8002c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	6952      	ldr	r2, [r2, #20]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e00f      	b.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d0c3      	beq.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	68d2      	ldr	r2, [r2, #12]
 8002c94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	6952      	ldr	r2, [r2, #20]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff80 	bl	8002bdc <HAL_UART_ErrorCallback>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b21      	cmp	r3, #33	; 0x21
 8002cf6:	d143      	bne.n	8002d80 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d00:	d119      	bne.n	8002d36 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d14:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	1c9a      	adds	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	621a      	str	r2, [r3, #32]
 8002d28:	e00e      	b.n	8002d48 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	e008      	b.n	8002d48 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	1c58      	adds	r0, r3, #1
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6208      	str	r0, [r1, #32]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	68d2      	ldr	r2, [r2, #12]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff03 	bl	8002bb8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b22      	cmp	r3, #34	; 0x22
 8002dce:	d171      	bne.n	8002eb4 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d123      	bne.n	8002e22 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10e      	bne.n	8002e06 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	1c9a      	adds	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
 8002e04:	e029      	b.n	8002e5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	e01b      	b.n	8002e5a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	1c59      	adds	r1, r3, #1
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6291      	str	r1, [r2, #40]	; 0x28
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e00c      	b.n	8002e5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6291      	str	r1, [r2, #40]	; 0x28
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6852      	ldr	r2, [r2, #4]
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4619      	mov	r1, r3
 8002e68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d120      	bne.n	8002eb0 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	68d2      	ldr	r2, [r2, #12]
 8002e78:	f022 0220 	bic.w	r2, r2, #32
 8002e7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	68d2      	ldr	r2, [r2, #12]
 8002e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8c:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	6952      	ldr	r2, [r2, #20]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fe8f 	bl	8002bca <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e002      	b.n	8002eb6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	6912      	ldr	r2, [r2, #16]
 8002ed6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f06:	f023 030c 	bic.w	r3, r3, #12
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	6952      	ldr	r2, [r2, #20]
 8002f1a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6992      	ldr	r2, [r2, #24]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	; (80030e8 <UART_SetConfig+0x228>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d16b      	bne.n	8003008 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681c      	ldr	r4, [r3, #0]
 8002f34:	f7fe ffb2 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4a67      	ldr	r2, [pc, #412]	; (80030ec <UART_SetConfig+0x22c>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	011d      	lsls	r5, r3, #4
 8002f58:	f7fe ffa0 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009a      	lsls	r2, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f72:	f7fe ff93 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	4a57      	ldr	r2, [pc, #348]	; (80030ec <UART_SetConfig+0x22c>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2264      	movs	r2, #100	; 0x64
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	1af3      	subs	r3, r6, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <UART_SetConfig+0x22c>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fac:	441d      	add	r5, r3
 8002fae:	f7fe ff75 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fc8:	f7fe ff68 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009a      	lsls	r2, r3, #2
 8002fd6:	441a      	add	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4a42      	ldr	r2, [pc, #264]	; (80030ec <UART_SetConfig+0x22c>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2264      	movs	r2, #100	; 0x64
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	1af3      	subs	r3, r6, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a3d      	ldr	r2, [pc, #244]	; (80030ec <UART_SetConfig+0x22c>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	442b      	add	r3, r5
 8003004:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003006:	e06a      	b.n	80030de <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681c      	ldr	r4, [r3, #0]
 800300c:	f7fe ff32 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003010:	4602      	mov	r2, r0
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	4a31      	ldr	r2, [pc, #196]	; (80030ec <UART_SetConfig+0x22c>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	011d      	lsls	r5, r3, #4
 8003030:	f7fe ff20 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003034:	4602      	mov	r2, r0
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009a      	lsls	r2, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	fbb2 f6f3 	udiv	r6, r2, r3
 800304a:	f7fe ff13 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 800304e:	4602      	mov	r2, r0
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009a      	lsls	r2, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <UART_SetConfig+0x22c>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2264      	movs	r2, #100	; 0x64
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	1af3      	subs	r3, r6, r3
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <UART_SetConfig+0x22c>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	441d      	add	r5, r3
 8003086:	f7fe fef5 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 800308a:	4602      	mov	r2, r0
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f6f3 	udiv	r6, r2, r3
 80030a0:	f7fe fee8 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <UART_SetConfig+0x22c>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	2264      	movs	r2, #100	; 0x64
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	1af3      	subs	r3, r6, r3
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	3332      	adds	r3, #50	; 0x32
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <UART_SetConfig+0x22c>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	442b      	add	r3, r5
 80030dc:	60a3      	str	r3, [r4, #8]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40013800 	.word	0x40013800
 80030ec:	51eb851f 	.word	0x51eb851f

080030f0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030f0:	b084      	sub	sp, #16
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	f107 0014 	add.w	r0, r7, #20
 80030fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	b004      	add	sp, #16
 800310e:	4770      	bx	lr

08003110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800311c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003120:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	b29b      	uxth	r3, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	b29a      	uxth	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8003150:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8003154:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b29b      	uxth	r3, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	b29b      	uxth	r3, r3
 8003166:	4013      	ands	r3, r2
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003194:	b084      	sub	sp, #16
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	f107 0014 	add.w	r0, r7, #20
 80031a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffa2 	bl	8003110 <USB_EnableGlobalInt>
    
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031d8:	b004      	add	sp, #16
 80031da:	4770      	bx	lr

080031dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031dc:	b490      	push	{r4, r7}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	78db      	ldrb	r3, [r3, #3]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d85f      	bhi.n	80032ae <USB_ActivateEndpoint+0xd2>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <USB_ActivateEndpoint+0x18>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003205 	.word	0x08003205
 80031f8:	08003283 	.word	0x08003283
 80031fc:	08003231 	.word	0x08003231
 8003200:	08003257 	.word	0x08003257
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	b29b      	uxth	r3, r3
 8003226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322a:	b29b      	uxth	r3, r3
 800322c:	8013      	strh	r3, [r2, #0]
    break;
 800322e:	e03f      	b.n	80032b0 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800324c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003250:	b29b      	uxth	r3, r3
 8003252:	8013      	strh	r3, [r2, #0]
    break;
 8003254:	e02c      	b.n	80032b0 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	b29b      	uxth	r3, r3
 8003278:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800327c:	b29b      	uxth	r3, r3
 800327e:	8013      	strh	r3, [r2, #0]
    break;
 8003280:	e016      	b.n	80032b0 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	8013      	strh	r3, [r2, #0]
    break;
 80032ac:	e000      	b.n	80032b0 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 80032ae:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b299      	uxth	r1, r3
 80032c8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032cc:	400b      	ands	r3, r1
 80032ce:	b299      	uxth	r1, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	430b      	orrs	r3, r1
 80032d8:	b299      	uxth	r1, r3
 80032da:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <USB_ActivateEndpoint+0x2d4>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7a9b      	ldrb	r3, [r3, #10]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 80e8 	bne.w	80034bc <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d04c      	beq.n	800338e <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	005a      	lsls	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003310:	461a      	mov	r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	889b      	ldrh	r3, [r3, #4]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <USB_ActivateEndpoint+0x180>
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b299      	uxth	r1, r3
 800334c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003350:	400b      	ands	r3, r1
 8003352:	b299      	uxth	r1, r3
 8003354:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <USB_ActivateEndpoint+0x2d8>)
 8003356:	430b      	orrs	r3, r1
 8003358:	b29b      	uxth	r3, r3
 800335a:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003372:	b29c      	uxth	r4, r3
 8003374:	f084 0320 	eor.w	r3, r4, #32
 8003378:	b29c      	uxth	r4, r3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	441a      	add	r2, r3
 8003384:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <USB_ActivateEndpoint+0x2d4>)
 8003386:	4323      	orrs	r3, r4
 8003388:	b29b      	uxth	r3, r3
 800338a:	8013      	strh	r3, [r2, #0]
 800338c:	e1d9      	b.n	8003742 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	3304      	adds	r3, #4
 80033a2:	005a      	lsls	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ac:	461a      	mov	r2, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	889b      	ldrh	r3, [r3, #4]
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	3306      	adds	r3, #6
 80033ce:	005a      	lsls	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b3e      	cmp	r3, #62	; 0x3e
 80033e0:	d918      	bls.n	8003414 <USB_ActivateEndpoint+0x238>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	81fb      	strh	r3, [r7, #14]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <USB_ActivateEndpoint+0x220>
 80033f6:	89fb      	ldrh	r3, [r7, #14]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	81fb      	strh	r3, [r7, #14]
 80033fc:	89fb      	ldrh	r3, [r7, #14]
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	b29b      	uxth	r3, r3
 8003402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e012      	b.n	800343a <USB_ActivateEndpoint+0x25e>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	81fb      	strh	r3, [r7, #14]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <USB_ActivateEndpoint+0x252>
 8003428:	89fb      	ldrh	r3, [r7, #14]
 800342a:	3301      	adds	r3, #1
 800342c:	81fb      	strh	r3, [r7, #14]
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <USB_ActivateEndpoint+0x29c>
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b299      	uxth	r1, r3
 8003468:	f640 730f 	movw	r3, #3855	; 0xf0f
 800346c:	400b      	ands	r3, r1
 800346e:	b299      	uxth	r1, r3
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <USB_ActivateEndpoint+0x2dc>)
 8003472:	430b      	orrs	r3, r1
 8003474:	b29b      	uxth	r3, r3
 8003476:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	b29c      	uxth	r4, r3
 8003490:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003494:	b29c      	uxth	r4, r3
 8003496:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800349a:	b29c      	uxth	r4, r3
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	4b02      	ldr	r3, [pc, #8]	; (80034b0 <USB_ActivateEndpoint+0x2d4>)
 80034a8:	4323      	orrs	r3, r4
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8013      	strh	r3, [r2, #0]
 80034ae:	e148      	b.n	8003742 <USB_ActivateEndpoint+0x566>
 80034b0:	ffff8080 	.word	0xffff8080
 80034b4:	ffff80c0 	.word	0xffff80c0
 80034b8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b299      	uxth	r1, r3
 80034d4:	f640 630f 	movw	r3, #3599	; 0xe0f
 80034d8:	400b      	ands	r3, r1
 80034da:	b299      	uxth	r1, r3
 80034dc:	4b9c      	ldr	r3, [pc, #624]	; (8003750 <USB_ActivateEndpoint+0x574>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	005a      	lsls	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003500:	461a      	mov	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	88db      	ldrh	r3, [r3, #6]
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	005a      	lsls	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800352c:	461a      	mov	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	891b      	ldrh	r3, [r3, #8]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	785b      	ldrb	r3, [r3, #1]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 8083 	bne.w	800364a <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d013      	beq.n	8003582 <USB_ActivateEndpoint+0x3a6>
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b299      	uxth	r1, r3
 8003572:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003576:	400b      	ands	r3, r1
 8003578:	b299      	uxth	r1, r3
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <USB_ActivateEndpoint+0x578>)
 800357c:	430b      	orrs	r3, r1
 800357e:	b29b      	uxth	r3, r3
 8003580:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <USB_ActivateEndpoint+0x3e4>
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b299      	uxth	r1, r3
 80035b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035b4:	400b      	ands	r3, r1
 80035b6:	b299      	uxth	r1, r3
 80035b8:	4b67      	ldr	r3, [pc, #412]	; (8003758 <USB_ActivateEndpoint+0x57c>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	b29b      	uxth	r3, r3
 80035be:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b299      	uxth	r1, r3
 80035d8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035dc:	400b      	ands	r3, r1
 80035de:	b299      	uxth	r1, r3
 80035e0:	4b5d      	ldr	r3, [pc, #372]	; (8003758 <USB_ActivateEndpoint+0x57c>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	b29c      	uxth	r4, r3
 8003600:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003604:	b29c      	uxth	r4, r3
 8003606:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800360a:	b29c      	uxth	r4, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	4b51      	ldr	r3, [pc, #324]	; (800375c <USB_ActivateEndpoint+0x580>)
 8003618:	4323      	orrs	r3, r4
 800361a:	b29b      	uxth	r3, r3
 800361c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003634:	b29c      	uxth	r4, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <USB_ActivateEndpoint+0x580>)
 8003642:	4323      	orrs	r3, r4
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]
 8003648:	e07b      	b.n	8003742 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <USB_ActivateEndpoint+0x4ac>
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b299      	uxth	r1, r3
 8003678:	f640 730f 	movw	r3, #3855	; 0xf0f
 800367c:	400b      	ands	r3, r1
 800367e:	b299      	uxth	r1, r3
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <USB_ActivateEndpoint+0x578>)
 8003682:	430b      	orrs	r3, r1
 8003684:	b29b      	uxth	r3, r3
 8003686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <USB_ActivateEndpoint+0x4ea>
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b299      	uxth	r1, r3
 80036b6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80036ba:	400b      	ands	r3, r1
 80036bc:	b299      	uxth	r1, r3
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <USB_ActivateEndpoint+0x57c>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b299      	uxth	r1, r3
 80036de:	f640 730f 	movw	r3, #3855	; 0xf0f
 80036e2:	400b      	ands	r3, r1
 80036e4:	b299      	uxth	r1, r3
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <USB_ActivateEndpoint+0x578>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003704:	b29c      	uxth	r4, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <USB_ActivateEndpoint+0x580>)
 8003712:	4323      	orrs	r3, r4
 8003714:	b29b      	uxth	r3, r3
 8003716:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	b29c      	uxth	r4, r3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <USB_ActivateEndpoint+0x580>)
 800373c:	4323      	orrs	r3, r4
 800373e:	b29b      	uxth	r3, r3
 8003740:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bc90      	pop	{r4, r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	ffff8180 	.word	0xffff8180
 8003754:	ffffc080 	.word	0xffffc080
 8003758:	ffff80c0 	.word	0xffff80c0
 800375c:	ffff8080 	.word	0xffff8080

08003760 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003760:	b490      	push	{r4, r7}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	7a9b      	ldrb	r3, [r3, #10]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d16d      	bne.n	800384e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	785b      	ldrb	r3, [r3, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d034      	beq.n	80037e4 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <USB_DeactivateEndpoint+0x58>
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b299      	uxth	r1, r3
 80037a8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80037ac:	400b      	ands	r3, r1
 80037ae:	b299      	uxth	r1, r3
 80037b0:	4b68      	ldr	r3, [pc, #416]	; (8003954 <USB_DeactivateEndpoint+0x1f4>)
 80037b2:	430b      	orrs	r3, r1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ce:	b29c      	uxth	r4, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	4b5f      	ldr	r3, [pc, #380]	; (8003958 <USB_DeactivateEndpoint+0x1f8>)
 80037dc:	4323      	orrs	r3, r4
 80037de:	b29b      	uxth	r3, r3
 80037e0:	8013      	strh	r3, [r2, #0]
 80037e2:	e139      	b.n	8003a58 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <USB_DeactivateEndpoint+0xc2>
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	441a      	add	r2, r3
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b299      	uxth	r1, r3
 8003812:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003816:	400b      	ands	r3, r1
 8003818:	b299      	uxth	r1, r3
 800381a:	4b50      	ldr	r3, [pc, #320]	; (800395c <USB_DeactivateEndpoint+0x1fc>)
 800381c:	430b      	orrs	r3, r1
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	b29c      	uxth	r4, r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	4b44      	ldr	r3, [pc, #272]	; (8003958 <USB_DeactivateEndpoint+0x1f8>)
 8003846:	4323      	orrs	r3, r4
 8003848:	b29b      	uxth	r3, r3
 800384a:	8013      	strh	r3, [r2, #0]
 800384c:	e104      	b.n	8003a58 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 8084 	bne.w	8003960 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d013      	beq.n	8003896 <USB_DeactivateEndpoint+0x136>
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b299      	uxth	r1, r3
 8003886:	f640 730f 	movw	r3, #3855	; 0xf0f
 800388a:	400b      	ands	r3, r1
 800388c:	b299      	uxth	r1, r3
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <USB_DeactivateEndpoint+0x1fc>)
 8003890:	430b      	orrs	r3, r1
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <USB_DeactivateEndpoint+0x174>
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b299      	uxth	r1, r3
 80038c4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038c8:	400b      	ands	r3, r1
 80038ca:	b299      	uxth	r1, r3
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <USB_DeactivateEndpoint+0x1f4>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b299      	uxth	r1, r3
 80038ec:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038f0:	400b      	ands	r3, r1
 80038f2:	b299      	uxth	r1, r3
 80038f4:	4b17      	ldr	r3, [pc, #92]	; (8003954 <USB_DeactivateEndpoint+0x1f4>)
 80038f6:	430b      	orrs	r3, r1
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	b29c      	uxth	r4, r3
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <USB_DeactivateEndpoint+0x1f8>)
 8003920:	4323      	orrs	r3, r4
 8003922:	b29b      	uxth	r3, r3
 8003924:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393c:	b29c      	uxth	r4, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <USB_DeactivateEndpoint+0x1f8>)
 800394a:	4323      	orrs	r3, r4
 800394c:	b29b      	uxth	r3, r3
 800394e:	8013      	strh	r3, [r2, #0]
 8003950:	e082      	b.n	8003a58 <USB_DeactivateEndpoint+0x2f8>
 8003952:	bf00      	nop
 8003954:	ffff80c0 	.word	0xffff80c0
 8003958:	ffff8080 	.word	0xffff8080
 800395c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <USB_DeactivateEndpoint+0x23e>
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b299      	uxth	r1, r3
 800398e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003992:	400b      	ands	r3, r1
 8003994:	b299      	uxth	r1, r3
 8003996:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <USB_DeactivateEndpoint+0x304>)
 8003998:	430b      	orrs	r3, r1
 800399a:	b29b      	uxth	r3, r3
 800399c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <USB_DeactivateEndpoint+0x27c>
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b299      	uxth	r1, r3
 80039cc:	f640 730f 	movw	r3, #3855	; 0xf0f
 80039d0:	400b      	ands	r3, r1
 80039d2:	b299      	uxth	r1, r3
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <USB_DeactivateEndpoint+0x308>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b299      	uxth	r1, r3
 80039f4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80039f8:	400b      	ands	r3, r1
 80039fa:	b299      	uxth	r1, r3
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <USB_DeactivateEndpoint+0x304>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1a:	b29c      	uxth	r4, r3
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <USB_DeactivateEndpoint+0x30c>)
 8003a28:	4323      	orrs	r3, r4
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	b29c      	uxth	r4, r3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	441a      	add	r2, r3
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <USB_DeactivateEndpoint+0x30c>)
 8003a52:	4323      	orrs	r3, r4
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc90      	pop	{r4, r7}
 8003a62:	4770      	bx	lr
 8003a64:	ffffc080 	.word	0xffffc080
 8003a68:	ffff80c0 	.word	0xffff80c0
 8003a6c:	ffff8080 	.word	0xffff8080

08003a70 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b08d      	sub	sp, #52	; 0x34
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f040 8149 	bne.w	8003d20 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d909      	bls.n	8003aae <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	619a      	str	r2, [r3, #24]
 8003aac:	e005      	b.n	8003aba <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	7a9b      	ldrb	r3, [r3, #10]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11b      	bne.n	8003afa <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6959      	ldr	r1, [r3, #20]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	889a      	ldrh	r2, [r3, #4]
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fb7d 	bl	80041ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	005a      	lsls	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af2:	461a      	mov	r2, r3
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e0f6      	b.n	8003ce8 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d059      	beq.n	8003bc4 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d13b      	bne.n	8003b90 <USB_EPStartXfer+0x120>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3306      	adds	r3, #6
 8003b2c:	005a      	lsls	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b3c:	d916      	bls.n	8003b6c <USB_EPStartXfer+0xfc>
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <USB_EPStartXfer+0xe4>
 8003b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b50:	3b01      	subs	r3, #1
 8003b52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e027      	b.n	8003bbc <USB_EPStartXfer+0x14c>
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <USB_EPStartXfer+0x112>
 8003b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b7e:	3301      	adds	r3, #1
 8003b80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b84:	029b      	lsls	r3, r3, #10
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e015      	b.n	8003bbc <USB_EPStartXfer+0x14c>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d111      	bne.n	8003bbc <USB_EPStartXfer+0x14c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3302      	adds	r3, #2
 8003bac:	005a      	lsls	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	891b      	ldrh	r3, [r3, #8]
 8003bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003bc2:	e058      	b.n	8003c76 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d13b      	bne.n	8003c44 <USB_EPStartXfer+0x1d4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3302      	adds	r3, #2
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf0:	d916      	bls.n	8003c20 <USB_EPStartXfer+0x1b0>
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <USB_EPStartXfer+0x198>
 8003c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c04:	3b01      	subs	r3, #1
 8003c06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e027      	b.n	8003c70 <USB_EPStartXfer+0x200>
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <USB_EPStartXfer+0x1c6>
 8003c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c32:	3301      	adds	r3, #1
 8003c34:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c38:	029b      	lsls	r3, r3, #10
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e015      	b.n	8003c70 <USB_EPStartXfer+0x200>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d111      	bne.n	8003c70 <USB_EPStartXfer+0x200>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	005a      	lsls	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	88db      	ldrh	r3, [r3, #6]
 8003c74:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6959      	ldr	r1, [r3, #20]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 faa4 	bl	80041ce <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d114      	bne.n	8003cb8 <USB_EPStartXfer+0x248>
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b299      	uxth	r1, r3
 8003ca6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003caa:	400b      	ands	r3, r1
 8003cac:	b299      	uxth	r1, r3
 8003cae:	4b92      	ldr	r3, [pc, #584]	; (8003ef8 <USB_EPStartXfer+0x488>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]
 8003cb6:	e017      	b.n	8003ce8 <USB_EPStartXfer+0x278>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d113      	bne.n	8003ce8 <USB_EPStartXfer+0x278>
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b299      	uxth	r1, r3
 8003cd8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003cdc:	400b      	ands	r3, r1
 8003cde:	b299      	uxth	r1, r3
 8003ce0:	4b86      	ldr	r3, [pc, #536]	; (8003efc <USB_EPStartXfer+0x48c>)
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfe:	b29c      	uxth	r4, r3
 8003d00:	f084 0310 	eor.w	r3, r4, #16
 8003d04:	b29c      	uxth	r4, r3
 8003d06:	f084 0320 	eor.w	r3, r4, #32
 8003d0a:	b29c      	uxth	r4, r3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	4b7a      	ldr	r3, [pc, #488]	; (8003f00 <USB_EPStartXfer+0x490>)
 8003d18:	4323      	orrs	r3, r4
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	8013      	strh	r3, [r2, #0]
 8003d1e:	e122      	b.n	8003f66 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d909      	bls.n	8003d40 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	1ad2      	subs	r2, r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	619a      	str	r2, [r3, #24]
 8003d3e:	e005      	b.n	8003d4c <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	7a9b      	ldrb	r3, [r3, #10]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d13b      	bne.n	8003dcc <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	3306      	adds	r3, #6
 8003d68:	005a      	lsls	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b3e      	cmp	r3, #62	; 0x3e
 8003d78:	d916      	bls.n	8003da8 <USB_EPStartXfer+0x338>
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <USB_EPStartXfer+0x320>
 8003d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e0c3      	b.n	8003f30 <USB_EPStartXfer+0x4c0>
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <USB_EPStartXfer+0x34e>
 8003db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dba:	3301      	adds	r3, #1
 8003dbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dc0:	029b      	lsls	r3, r3, #10
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e0b1      	b.n	8003f30 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d13b      	bne.n	8003e4c <USB_EPStartXfer+0x3dc>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	3302      	adds	r3, #2
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b3e      	cmp	r3, #62	; 0x3e
 8003df8:	d916      	bls.n	8003e28 <USB_EPStartXfer+0x3b8>
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	843b      	strh	r3, [r7, #32]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <USB_EPStartXfer+0x3a0>
 8003e0a:	8c3b      	ldrh	r3, [r7, #32]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	843b      	strh	r3, [r7, #32]
 8003e10:	8c3b      	ldrh	r3, [r7, #32]
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e027      	b.n	8003e78 <USB_EPStartXfer+0x408>
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	843b      	strh	r3, [r7, #32]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <USB_EPStartXfer+0x3ce>
 8003e38:	8c3b      	ldrh	r3, [r7, #32]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	843b      	strh	r3, [r7, #32]
 8003e3e:	8c3b      	ldrh	r3, [r7, #32]
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e015      	b.n	8003e78 <USB_EPStartXfer+0x408>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d111      	bne.n	8003e78 <USB_EPStartXfer+0x408>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	3302      	adds	r3, #2
 8003e68:	005a      	lsls	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e72:	461a      	mov	r2, r3
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d141      	bne.n	8003f04 <USB_EPStartXfer+0x494>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	3306      	adds	r3, #6
 8003e94:	005a      	lsls	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ea4:	d916      	bls.n	8003ed4 <USB_EPStartXfer+0x464>
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	83fb      	strh	r3, [r7, #30]
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <USB_EPStartXfer+0x44c>
 8003eb6:	8bfb      	ldrh	r3, [r7, #30]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	83fb      	strh	r3, [r7, #30]
 8003ebc:	8bfb      	ldrh	r3, [r7, #30]
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e02d      	b.n	8003f30 <USB_EPStartXfer+0x4c0>
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	83fb      	strh	r3, [r7, #30]
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <USB_EPStartXfer+0x47a>
 8003ee4:	8bfb      	ldrh	r3, [r7, #30]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	83fb      	strh	r3, [r7, #30]
 8003eea:	8bfb      	ldrh	r3, [r7, #30]
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e01b      	b.n	8003f30 <USB_EPStartXfer+0x4c0>
 8003ef8:	ffff80c0 	.word	0xffff80c0
 8003efc:	ffffc080 	.word	0xffffc080
 8003f00:	ffff8080 	.word	0xffff8080
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d111      	bne.n	8003f30 <USB_EPStartXfer+0x4c0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	005a      	lsls	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003f4c:	b29c      	uxth	r4, r3
 8003f4e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003f52:	b29c      	uxth	r4, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <USB_EPStartXfer+0x500>)
 8003f60:	4323      	orrs	r3, r4
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3734      	adds	r7, #52	; 0x34
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd90      	pop	{r4, r7, pc}
 8003f70:	ffff8080 	.word	0xffff8080

08003f74 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003f74:	b490      	push	{r4, r7}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d118      	bne.n	8003fb8 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003f98:	401c      	ands	r4, r3
 8003f9a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003f9e:	f084 0410 	eor.w	r4, r4, #16
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	b2a1      	uxth	r1, r4
 8003fae:	4b20      	ldr	r3, [pc, #128]	; (8004030 <USB_EPSetStall+0xbc>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]
 8003fb6:	e034      	b.n	8004022 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d018      	beq.n	8003ff2 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd6:	b29c      	uxth	r4, r3
 8003fd8:	f084 0310 	eor.w	r3, r4, #16
 8003fdc:	b29c      	uxth	r4, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	441a      	add	r2, r3
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <USB_EPSetStall+0xbc>)
 8003fea:	4323      	orrs	r3, r4
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]
 8003ff0:	e017      	b.n	8004022 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	b29c      	uxth	r4, r3
 800400a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800400e:	b29c      	uxth	r4, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <USB_EPSetStall+0xbc>)
 800401c:	4323      	orrs	r3, r4
 800401e:	b29b      	uxth	r3, r3
 8004020:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bc90      	pop	{r4, r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	ffff8080 	.word	0xffff8080

08004034 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004034:	b490      	push	{r4, r7}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03a      	beq.n	80040bc <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <USB_EPClearStall+0x50>
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b299      	uxth	r1, r3
 8004074:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004078:	400b      	ands	r3, r1
 800407a:	b299      	uxth	r1, r3
 800407c:	4b2f      	ldr	r3, [pc, #188]	; (800413c <USB_EPClearStall+0x108>)
 800407e:	430b      	orrs	r3, r1
 8004080:	b29b      	uxth	r3, r3
 8004082:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	b29c      	uxth	r4, r3
 800409c:	f084 0310 	eor.w	r3, r4, #16
 80040a0:	b29c      	uxth	r4, r3
 80040a2:	f084 0320 	eor.w	r3, r4, #32
 80040a6:	b29c      	uxth	r4, r3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	4b23      	ldr	r3, [pc, #140]	; (8004140 <USB_EPClearStall+0x10c>)
 80040b4:	4323      	orrs	r3, r4
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
 80040ba:	e039      	b.n	8004130 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d013      	beq.n	80040fa <USB_EPClearStall+0xc6>
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b299      	uxth	r1, r3
 80040ea:	f640 730f 	movw	r3, #3855	; 0xf0f
 80040ee:	400b      	ands	r3, r1
 80040f0:	b299      	uxth	r1, r3
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <USB_EPClearStall+0x110>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004110:	b29c      	uxth	r4, r3
 8004112:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004116:	b29c      	uxth	r4, r3
 8004118:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800411c:	b29c      	uxth	r4, r3
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <USB_EPClearStall+0x10c>)
 800412a:	4323      	orrs	r3, r4
 800412c:	b29b      	uxth	r3, r3
 800412e:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bc90      	pop	{r4, r7}
 800413a:	4770      	bx	lr
 800413c:	ffff80c0 	.word	0xffff80c0
 8004140:	ffff8080 	.word	0xffff8080
 8004144:	ffffc080 	.word	0xffffc080

08004148 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b08b      	sub	sp, #44	; 0x2c
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	4611      	mov	r1, r2
 80041da:	461a      	mov	r2, r3
 80041dc:	460b      	mov	r3, r1
 80041de:	80fb      	strh	r3, [r7, #6]
 80041e0:	4613      	mov	r3, r2
 80041e2:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80041e4:	88bb      	ldrh	r3, [r7, #4]
 80041e6:	3301      	adds	r3, #1
 80041e8:	105b      	asrs	r3, r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	461a      	mov	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420a:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	e01b      	b.n	800424a <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	461a      	mov	r2, r3
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	1c9a      	adds	r2, r3, #2
 8004230:	623a      	str	r2, [r7, #32]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	b292      	uxth	r2, r2
 8004236:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	3302      	adds	r3, #2
 800423c:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3301      	adds	r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	3b01      	subs	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e0      	bne.n	8004212 <USB_WritePMA+0x44>
  }
}
 8004250:	bf00      	nop
 8004252:	372c      	adds	r7, #44	; 0x2c
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800425a:	b480      	push	{r7}
 800425c:	b089      	sub	sp, #36	; 0x24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	4611      	mov	r1, r2
 8004266:	461a      	mov	r2, r3
 8004268:	460b      	mov	r3, r1
 800426a:	80fb      	strh	r3, [r7, #6]
 800426c:	4613      	mov	r3, r2
 800426e:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8004270:	88bb      	ldrh	r3, [r7, #4]
 8004272:	3301      	adds	r3, #1
 8004274:	105b      	asrs	r3, r3, #1
 8004276:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	461a      	mov	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800428e:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	e00e      	b.n	80042b4 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	60ba      	str	r2, [r7, #8]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	1d11      	adds	r1, r2, #4
 80042a0:	61b9      	str	r1, [r7, #24]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	b292      	uxth	r2, r2
 80042a6:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ed      	bne.n	8004296 <USB_ReadPMA+0x3c>
  }
}
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 80042d4:	2305      	movs	r3, #5
 80042d6:	2203      	movs	r2, #3
 80042d8:	2181      	movs	r1, #129	; 0x81
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fd66 	bl	8005dac <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);  
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80042e0:	2010      	movs	r0, #16
 80042e2:	f001 ff13 	bl	800610c <USBD_static_malloc>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <USBD_HID_Init+0x3a>
  {
    ret = 1; 
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e004      	b.n	8004308 <USBD_HID_Init+0x44>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004304:	2200      	movs	r2, #0
 8004306:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 800431e:	2181      	movs	r1, #129	; 0x81
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f001 fd81 	bl	8005e28 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <USBD_HID_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fef4 	bl	8006124 <USBD_static_free>
    pdev->pClassData = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  } 
  
  return USBD_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004368:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004372:	2b00      	cmp	r3, #0
 8004374:	d044      	beq.n	8004400 <USBD_HID_Setup+0xb0>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d17d      	bne.n	8004476 <USBD_HID_Setup+0x126>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	3b02      	subs	r3, #2
 8004380:	2b09      	cmp	r3, #9
 8004382:	d836      	bhi.n	80043f2 <USBD_HID_Setup+0xa2>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <USBD_HID_Setup+0x3c>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043e3 	.word	0x080043e3
 8004390:	080043c3 	.word	0x080043c3
 8004394:	080043f3 	.word	0x080043f3
 8004398:	080043f3 	.word	0x080043f3
 800439c:	080043f3 	.word	0x080043f3
 80043a0:	080043f3 	.word	0x080043f3
 80043a4:	080043f3 	.word	0x080043f3
 80043a8:	080043f3 	.word	0x080043f3
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043b5 	.word	0x080043b5
    {
      
      
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	885b      	ldrh	r3, [r3, #2]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]
      break;
 80043c0:	e01d      	b.n	80043fe <USBD_HID_Setup+0xae>
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->Protocol,
 80043c2:	68fb      	ldr	r3, [r7, #12]
      USBD_CtlSendData (pdev, 
 80043c4:	2201      	movs	r2, #1
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 ff49 	bl	8005260 <USBD_CtlSendData>
                        1);    
      break;
 80043ce:	e016      	b.n	80043fe <USBD_HID_Setup+0xae>
      
    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	885b      	ldrh	r3, [r3, #2]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]
      break;
 80043e0:	e00d      	b.n	80043fe <USBD_HID_Setup+0xae>
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->IdleState,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80043e6:	2201      	movs	r2, #1
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 ff38 	bl	8005260 <USBD_CtlSendData>
                        1);        
      break;      
 80043f0:	e005      	b.n	80043fe <USBD_HID_Setup+0xae>
      
    default:
      USBD_CtlError (pdev, req);
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fec8 	bl	800518a <USBD_CtlError>
      return USBD_FAIL; 
 80043fa:	2302      	movs	r3, #2
 80043fc:	e03c      	b.n	8004478 <USBD_HID_Setup+0x128>
    }
    break;
 80043fe:	e03a      	b.n	8004476 <USBD_HID_Setup+0x126>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b0a      	cmp	r3, #10
 8004406:	d027      	beq.n	8004458 <USBD_HID_Setup+0x108>
 8004408:	2b0b      	cmp	r3, #11
 800440a:	d02d      	beq.n	8004468 <USBD_HID_Setup+0x118>
 800440c:	2b06      	cmp	r3, #6
 800440e:	d132      	bne.n	8004476 <USBD_HID_Setup+0x126>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	885b      	ldrh	r3, [r3, #2]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b22      	cmp	r3, #34	; 0x22
 800441a:	d108      	bne.n	800442e <USBD_HID_Setup+0xde>
      {
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	88db      	ldrh	r3, [r3, #6]
 8004420:	2b4e      	cmp	r3, #78	; 0x4e
 8004422:	bf28      	it	cs
 8004424:	234e      	movcs	r3, #78	; 0x4e
 8004426:	82fb      	strh	r3, [r7, #22]
        pbuf = HID_CUSTOM_ReportDesc;
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <USBD_HID_Setup+0x130>)
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e00d      	b.n	800444a <USBD_HID_Setup+0xfa>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	885b      	ldrh	r3, [r3, #2]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b21      	cmp	r3, #33	; 0x21
 8004438:	d107      	bne.n	800444a <USBD_HID_Setup+0xfa>
      {
        pbuf = USBD_HID_Desc;   
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <USBD_HID_Setup+0x134>)
 800443c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	88db      	ldrh	r3, [r3, #6]
 8004442:	2b09      	cmp	r3, #9
 8004444:	bf28      	it	cs
 8004446:	2309      	movcs	r3, #9
 8004448:	82fb      	strh	r3, [r7, #22]
      }
      
      USBD_CtlSendData (pdev, 
 800444a:	8afb      	ldrh	r3, [r7, #22]
 800444c:	461a      	mov	r2, r3
 800444e:	6939      	ldr	r1, [r7, #16]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 ff05 	bl	8005260 <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 8004456:	e00e      	b.n	8004476 <USBD_HID_Setup+0x126>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev,
 800445c:	2201      	movs	r2, #1
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fefd 	bl	8005260 <USBD_CtlSendData>
                        1);
      break;
 8004466:	e006      	b.n	8004476 <USBD_HID_Setup+0x126>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	885b      	ldrh	r3, [r3, #2]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	609a      	str	r2, [r3, #8]
      break;
 8004474:	bf00      	nop
    }
  }
  return USBD_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000074 	.word	0x20000074
 8004484:	2000005c 	.word	0x2000005c

08004488 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800449c:	617b      	str	r3, [r7, #20]
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d10c      	bne.n	80044c2 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	7b1b      	ldrb	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2201      	movs	r2, #1
 80044b4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev, 
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	2181      	movs	r1, #129	; 0x81
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f001 fdb1 	bl	8006024 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,                                      
                        report,
                        len);
    }
  }
  return USBD_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2222      	movs	r2, #34	; 0x22
 80044d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80044da:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <USBD_HID_GetCfgDesc+0x1c>)
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000038 	.word	0x20000038

080044ec <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044fe:	2200      	movs	r2, #0
 8004500:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
	...

08004510 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	220a      	movs	r2, #10
 800451c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000068 	.word	0x20000068

08004530 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004544:	2302      	movs	r3, #2
 8004546:	e01a      	b.n	800457e <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	79fa      	ldrb	r2, [r7, #7]
 8004574:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f001 fb96 	bl	8005ca8 <USBD_LL_Init>
  
  return USBD_OK; 
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e001      	b.n	80045ac <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80045a8:	2302      	movs	r3, #2
 80045aa:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 fbc1 	bl	8005d48 <USBD_LL_Start>
  
  return USBD_OK;  
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80045f0:	2302      	movs	r3, #2
 80045f2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00c      	beq.n	8004618 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	4611      	mov	r1, r2
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	4611      	mov	r1, r2
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
  return USBD_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fd59 	bl	8005112 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2b01      	cmp	r3, #1
 8004682:	d00b      	beq.n	800469c <USBD_LL_SetupStage+0x54>
 8004684:	2b02      	cmp	r3, #2
 8004686:	d011      	beq.n	80046ac <USBD_LL_SetupStage+0x64>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d117      	bne.n	80046bc <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f987 	bl	80049a8 <USBD_StdDevReq>
    break;
 800469a:	e01a      	b.n	80046d2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f9cf 	bl	8004a48 <USBD_StdItfReq>
    break;
 80046aa:	e012      	b.n	80046d2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f9fa 	bl	8004aae <USBD_StdEPReq>
    break;
 80046ba:	e00a      	b.n	80046d2 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80046c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 fbe2 	bl	8005e94 <USBD_LL_StallEP>
    break;
 80046d0:	bf00      	nop
  }  
  return USBD_OK;  
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	460b      	mov	r3, r1
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d138      	bne.n	8004762 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80046f6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d142      	bne.n	8004788 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	429a      	cmp	r2, r3
 800470c:	d914      	bls.n	8004738 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4293      	cmp	r3, r2
 8004726:	bf28      	it	cs
 8004728:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fdc3 	bl	80052bc <USBD_CtlContinueRx>
 8004736:	e027      	b.n	8004788 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800474a:	2b03      	cmp	r3, #3
 800474c:	d105      	bne.n	800475a <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fdc0 	bl	80052e0 <USBD_CtlSendStatus>
 8004760:	e012      	b.n	8004788 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004774:	2b03      	cmp	r3, #3
 8004776:	d107      	bne.n	8004788 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	7afa      	ldrb	r2, [r7, #11]
 8004782:	4611      	mov	r1, r2
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	4798      	blx	r3
  }  
  return USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	460b      	mov	r3, r1
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80047a0:	7afb      	ldrb	r3, [r7, #11]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d16c      	bne.n	8004880 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3314      	adds	r3, #20
 80047aa:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d157      	bne.n	8004866 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d915      	bls.n	80047ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fd5c 	bl	8005298 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80047e0:	2300      	movs	r3, #0
 80047e2:	2200      	movs	r2, #0
 80047e4:	2100      	movs	r1, #0
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f001 fc56 	bl	8006098 <USBD_LL_PrepareReceive>
 80047ec:	e03b      	b.n	8004866 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68d2      	ldr	r2, [r2, #12]
 80047f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80047fa:	fb02 f201 	mul.w	r2, r2, r1
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11c      	bne.n	800483e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800480c:	429a      	cmp	r2, r3
 800480e:	d316      	bcc.n	800483e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800481a:	429a      	cmp	r2, r3
 800481c:	d20f      	bcs.n	800483e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fd38 	bl	8005298 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004830:	2300      	movs	r3, #0
 8004832:	2200      	movs	r2, #0
 8004834:	2100      	movs	r1, #0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f001 fc2e 	bl	8006098 <USBD_LL_PrepareReceive>
 800483c:	e013      	b.n	8004866 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004850:	2b03      	cmp	r3, #3
 8004852:	d105      	bne.n	8004860 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fd50 	bl	8005306 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11a      	bne.n	80048a6 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff fead 	bl	80045d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800487e:	e012      	b.n	80048a6 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004892:	2b03      	cmp	r3, #3
 8004894:	d107      	bne.n	80048a6 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	7afa      	ldrb	r2, [r7, #11]
 80048a0:	4611      	mov	r1, r2
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	4798      	blx	r3
  }  
  return USBD_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80048b8:	2340      	movs	r3, #64	; 0x40
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f001 fa74 	bl	8005dac <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80048cc:	2340      	movs	r3, #64	; 0x40
 80048ce:	2200      	movs	r2, #0
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 fa6a 	bl	8005dac <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2240      	movs	r2, #64	; 0x40
 80048dc:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6852      	ldr	r2, [r2, #4]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	4611      	mov	r1, r2
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
 
  
  return USBD_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2204      	movs	r2, #4
 8004944:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004982:	2b03      	cmp	r3, #3
 8004984:	d10b      	bne.n	800499e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	d839      	bhi.n	8004a32 <USBD_StdDevReq+0x8a>
 80049be:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <USBD_StdDevReq+0x1c>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	08004a15 	.word	0x08004a15
 80049c8:	08004a29 	.word	0x08004a29
 80049cc:	08004a33 	.word	0x08004a33
 80049d0:	08004a1f 	.word	0x08004a1f
 80049d4:	08004a33 	.word	0x08004a33
 80049d8:	080049f7 	.word	0x080049f7
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	08004a33 	.word	0x08004a33
 80049e4:	08004a0b 	.word	0x08004a0b
 80049e8:	08004a01 	.word	0x08004a01
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f936 	bl	8004c60 <USBD_GetDescriptor>
    break;
 80049f4:	e022      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa25 	bl	8004e48 <USBD_SetAddress>
    break;
 80049fe:	e01d      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa5e 	bl	8004ec4 <USBD_SetConfig>
    break;
 8004a08:	e018      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fae1 	bl	8004fd4 <USBD_GetConfig>
    break;
 8004a12:	e013      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fb0e 	bl	8005038 <USBD_GetStatus>
    break;
 8004a1c:	e00e      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fb33 	bl	800508c <USBD_SetFeature>
    break;
 8004a26:	e009      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fb49 	bl	80050c2 <USBD_ClrFeature>
    break;
 8004a30:	e004      	b.n	8004a3c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fba8 	bl	800518a <USBD_CtlError>
    break;
 8004a3a:	bf00      	nop
  }
  
  return ret;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop

08004a48 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d11b      	bne.n	8004a98 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	889b      	ldrh	r3, [r3, #4]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d811      	bhi.n	8004a8e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	88db      	ldrh	r3, [r3, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d110      	bne.n	8004aa2 <USBD_StdItfReq+0x5a>
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fc2a 	bl	80052e0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004a8c:	e009      	b.n	8004aa2 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb7a 	bl	800518a <USBD_CtlError>
    break;
 8004a96:	e004      	b.n	8004aa2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fb75 	bl	800518a <USBD_CtlError>
    break;
 8004aa0:	e000      	b.n	8004aa4 <USBD_StdItfReq+0x5c>
    break;
 8004aa2:	bf00      	nop
  }
  return USBD_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	889b      	ldrh	r3, [r3, #4]
 8004ac0:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d108      	bne.n	8004ae0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
    
    return USBD_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e0ba      	b.n	8004c56 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d039      	beq.n	8004b5c <USBD_StdEPReq+0xae>
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d002      	beq.n	8004af2 <USBD_StdEPReq+0x44>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d06b      	beq.n	8004bc8 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004af0:	e0b0      	b.n	8004c54 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d002      	beq.n	8004b02 <USBD_StdEPReq+0x54>
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d00c      	beq.n	8004b1a <USBD_StdEPReq+0x6c>
 8004b00:	e025      	b.n	8004b4e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004b02:	7bbb      	ldrb	r3, [r7, #14]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d027      	beq.n	8004b58 <USBD_StdEPReq+0xaa>
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d024      	beq.n	8004b58 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 f9be 	bl	8005e94 <USBD_LL_StallEP>
      break;	
 8004b18:	e01e      	b.n	8004b58 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	885b      	ldrh	r3, [r3, #2]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <USBD_StdEPReq+0x8a>
 8004b28:	7bbb      	ldrb	r3, [r7, #14]
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d004      	beq.n	8004b38 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 f9ae 	bl	8005e94 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fbca 	bl	80052e0 <USBD_CtlSendStatus>
      break;
 8004b4c:	e005      	b.n	8004b5a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004b4e:	6839      	ldr	r1, [r7, #0]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb1a 	bl	800518a <USBD_CtlError>
      break;    
 8004b56:	e000      	b.n	8004b5a <USBD_StdEPReq+0xac>
      break;	
 8004b58:	bf00      	nop
    break;
 8004b5a:	e07b      	b.n	8004c54 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d002      	beq.n	8004b6c <USBD_StdEPReq+0xbe>
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d00c      	beq.n	8004b84 <USBD_StdEPReq+0xd6>
 8004b6a:	e024      	b.n	8004bb6 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d026      	beq.n	8004bc0 <USBD_StdEPReq+0x112>
 8004b72:	7bbb      	ldrb	r3, [r7, #14]
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d023      	beq.n	8004bc0 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004b78:	7bbb      	ldrb	r3, [r7, #14]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 f989 	bl	8005e94 <USBD_LL_StallEP>
      break;	
 8004b82:	e01d      	b.n	8004bc0 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	885b      	ldrh	r3, [r3, #2]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11b      	bne.n	8004bc4 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004b8c:	7bbb      	ldrb	r3, [r7, #14]
 8004b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004b96:	7bbb      	ldrb	r3, [r7, #14]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f001 f9b0 	bl	8005f00 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb96 	bl	80052e0 <USBD_CtlSendStatus>
      break;
 8004bb4:	e006      	b.n	8004bc4 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fae6 	bl	800518a <USBD_CtlError>
      break;    
 8004bbe:	e002      	b.n	8004bc6 <USBD_StdEPReq+0x118>
      break;	
 8004bc0:	bf00      	nop
 8004bc2:	e047      	b.n	8004c54 <USBD_StdEPReq+0x1a6>
      break;
 8004bc4:	bf00      	nop
    break;
 8004bc6:	e045      	b.n	8004c54 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d002      	beq.n	8004bd8 <USBD_StdEPReq+0x12a>
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d00b      	beq.n	8004bee <USBD_StdEPReq+0x140>
 8004bd6:	e036      	b.n	8004c46 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004bd8:	7bbb      	ldrb	r3, [r7, #14]
 8004bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d036      	beq.n	8004c50 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004be2:	7bbb      	ldrb	r3, [r7, #14]
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f001 f954 	bl	8005e94 <USBD_LL_StallEP>
      break;	
 8004bec:	e030      	b.n	8004c50 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da08      	bge.n	8004c08 <USBD_StdEPReq+0x15a>
 8004bf6:	7bbb      	ldrb	r3, [r7, #14]
 8004bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4413      	add	r3, r2
 8004c04:	3304      	adds	r3, #4
 8004c06:	e007      	b.n	8004c18 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
 8004c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004c0e:	3310      	adds	r3, #16
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 f9a4 	bl	8005f6c <USBD_LL_IsStallEP>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e002      	b.n	8004c38 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004c38:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb0e 	bl	8005260 <USBD_CtlSendData>
      break;
 8004c44:	e005      	b.n	8004c52 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa9e 	bl	800518a <USBD_CtlError>
      break;
 8004c4e:	e000      	b.n	8004c52 <USBD_StdEPReq+0x1a4>
      break;	
 8004c50:	bf00      	nop
    break;
 8004c52:	bf00      	nop
  }
  return ret;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	885b      	ldrh	r3, [r3, #2]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	f200 80c9 	bhi.w	8004e0c <USBD_GetDescriptor+0x1ac>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <USBD_GetDescriptor+0x20>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	08004cb5 	.word	0x08004cb5
 8004c88:	08004cf5 	.word	0x08004cf5
 8004c8c:	08004e0d 	.word	0x08004e0d
 8004c90:	08004e0d 	.word	0x08004e0d
 8004c94:	08004db9 	.word	0x08004db9
 8004c98:	08004ddf 	.word	0x08004ddf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	7c12      	ldrb	r2, [r2, #16]
 8004ca8:	f107 010a 	add.w	r1, r7, #10
 8004cac:	4610      	mov	r0, r2
 8004cae:	4798      	blx	r3
 8004cb0:	60f8      	str	r0, [r7, #12]
    break;
 8004cb2:	e0b0      	b.n	8004e16 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7c1b      	ldrb	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	f107 020a 	add.w	r2, r7, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
 8004ccc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004cd6:	e09e      	b.n	8004e16 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f107 020a 	add.w	r2, r7, #10
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	2202      	movs	r2, #2
 8004cf0:	701a      	strb	r2, [r3, #0]
    break;
 8004cf2:	e090      	b.n	8004e16 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	885b      	ldrh	r3, [r3, #2]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d856      	bhi.n	8004dac <USBD_GetDescriptor+0x14c>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <USBD_GetDescriptor+0xa4>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d1d 	.word	0x08004d1d
 8004d08:	08004d35 	.word	0x08004d35
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004d7d 	.word	0x08004d7d
 8004d18:	08004d95 	.word	0x08004d95
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	7c12      	ldrb	r2, [r2, #16]
 8004d28:	f107 010a 	add.w	r1, r7, #10
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4798      	blx	r3
 8004d30:	60f8      	str	r0, [r7, #12]
      break;
 8004d32:	e040      	b.n	8004db6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	7c12      	ldrb	r2, [r2, #16]
 8004d40:	f107 010a 	add.w	r1, r7, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4798      	blx	r3
 8004d48:	60f8      	str	r0, [r7, #12]
      break;
 8004d4a:	e034      	b.n	8004db6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	7c12      	ldrb	r2, [r2, #16]
 8004d58:	f107 010a 	add.w	r1, r7, #10
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
 8004d60:	60f8      	str	r0, [r7, #12]
      break;
 8004d62:	e028      	b.n	8004db6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	7c12      	ldrb	r2, [r2, #16]
 8004d70:	f107 010a 	add.w	r1, r7, #10
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
 8004d78:	60f8      	str	r0, [r7, #12]
      break;
 8004d7a:	e01c      	b.n	8004db6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	7c12      	ldrb	r2, [r2, #16]
 8004d88:	f107 010a 	add.w	r1, r7, #10
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4798      	blx	r3
 8004d90:	60f8      	str	r0, [r7, #12]
      break;
 8004d92:	e010      	b.n	8004db6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	7c12      	ldrb	r2, [r2, #16]
 8004da0:	f107 010a 	add.w	r1, r7, #10
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
 8004da8:	60f8      	str	r0, [r7, #12]
      break;
 8004daa:	e004      	b.n	8004db6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9eb 	bl	800518a <USBD_CtlError>
      return;
 8004db4:	e044      	b.n	8004e40 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8004db6:	e02e      	b.n	8004e16 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7c1b      	ldrb	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	f107 020a 	add.w	r2, r7, #10
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4798      	blx	r3
 8004dd0:	60f8      	str	r0, [r7, #12]
      break;
 8004dd2:	e020      	b.n	8004e16 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f9d7 	bl	800518a <USBD_CtlError>
      return;
 8004ddc:	e030      	b.n	8004e40 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7c1b      	ldrb	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f107 020a 	add.w	r2, r7, #10
 8004df2:	4610      	mov	r0, r2
 8004df4:	4798      	blx	r3
 8004df6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	701a      	strb	r2, [r3, #0]
      break; 
 8004e00:	e009      	b.n	8004e16 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f9c0 	bl	800518a <USBD_CtlError>
      return;
 8004e0a:	e019      	b.n	8004e40 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f9bb 	bl	800518a <USBD_CtlError>
    return;
 8004e14:	e014      	b.n	8004e40 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d011      	beq.n	8004e40 <USBD_GetDescriptor+0x1e0>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	88db      	ldrh	r3, [r3, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	88da      	ldrh	r2, [r3, #6]
 8004e28:	897b      	ldrh	r3, [r7, #10]
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	bf28      	it	cs
 8004e2e:	4613      	movcs	r3, r2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8004e34:	897b      	ldrh	r3, [r7, #10]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa10 	bl	8005260 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	889b      	ldrh	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12c      	bne.n	8004eb4 <USBD_SetAddress+0x6c>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	88db      	ldrh	r3, [r3, #6]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d128      	bne.n	8004eb4 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	885b      	ldrh	r3, [r3, #2]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d104      	bne.n	8004e82 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f985 	bl	800518a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004e80:	e01c      	b.n	8004ebc <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 f892 	bl	8005fb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa23 	bl	80052e0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004ea8:	e008      	b.n	8004ebc <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004eb2:	e003      	b.n	8004ebc <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f967 	bl	800518a <USBD_CtlError>
  } 
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	885b      	ldrh	r3, [r3, #2]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004ed6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004ed8:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d904      	bls.n	8004eea <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f951 	bl	800518a <USBD_CtlError>
 8004ee8:	e06f      	b.n	8004fca <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d002      	beq.n	8004efa <USBD_SetConfig+0x36>
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d023      	beq.n	8004f40 <USBD_SetConfig+0x7c>
 8004ef8:	e062      	b.n	8004fc0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004efa:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01a      	beq.n	8004f38 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004f02:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2203      	movs	r2, #3
 8004f10:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004f14:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fb62 	bl	80045e4 <USBD_SetClassConfig>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d104      	bne.n	8004f30 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f92e 	bl	800518a <USBD_CtlError>
          return;
 8004f2e:	e04c      	b.n	8004fca <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f9d5 	bl	80052e0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004f36:	e048      	b.n	8004fca <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9d1 	bl	80052e0 <USBD_CtlSendStatus>
      break;
 8004f3e:	e044      	b.n	8004fca <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004f40:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d112      	bne.n	8004f6e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004f50:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fb5e 	bl	8004622 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9ba 	bl	80052e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004f6c:	e02d      	b.n	8004fca <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d01d      	beq.n	8004fb8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fb4c 	bl	8004622 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004f8a:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <USBD_SetConfig+0x10c>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fb22 	bl	80045e4 <USBD_SetClassConfig>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d104      	bne.n	8004fb0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8ee 	bl	800518a <USBD_CtlError>
          return;
 8004fae:	e00c      	b.n	8004fca <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f995 	bl	80052e0 <USBD_CtlSendStatus>
      break;
 8004fb6:	e008      	b.n	8004fca <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f991 	bl	80052e0 <USBD_CtlSendStatus>
      break;
 8004fbe:	e004      	b.n	8004fca <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8e1 	bl	800518a <USBD_CtlError>
      break;
 8004fc8:	bf00      	nop
    }
  }
}
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000118 	.word	0x20000118

08004fd4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	88db      	ldrh	r3, [r3, #6]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d004      	beq.n	8004ff0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8ce 	bl	800518a <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004fee:	e01f      	b.n	8005030 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d002      	beq.n	8005000 <USBD_GetConfig+0x2c>
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d00b      	beq.n	8005016 <USBD_GetConfig+0x42>
 8004ffe:	e012      	b.n	8005026 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800500a:	2201      	movs	r2, #1
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f926 	bl	8005260 <USBD_CtlSendData>
      break;
 8005014:	e00c      	b.n	8005030 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800501a:	2201      	movs	r2, #1
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f91e 	bl	8005260 <USBD_CtlSendData>
      break;
 8005024:	e004      	b.n	8005030 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8ae 	bl	800518a <USBD_CtlError>
      break;
 800502e:	bf00      	nop
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005048:	3b02      	subs	r3, #2
 800504a:	2b01      	cmp	r3, #1
 800504c:	d815      	bhi.n	800507a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800506e:	2202      	movs	r2, #2
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8f4 	bl	8005260 <USBD_CtlSendData>
                      2);
    break;
 8005078:	e004      	b.n	8005084 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f884 	bl	800518a <USBD_CtlError>
    break;
 8005082:	bf00      	nop
  }
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	885b      	ldrh	r3, [r3, #2]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10d      	bne.n	80050ba <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f913 	bl	80052e0 <USBD_CtlSendStatus>
  }

}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80050d2:	3b02      	subs	r3, #2
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d812      	bhi.n	80050fe <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	885b      	ldrh	r3, [r3, #2]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d113      	bne.n	8005108 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8f2 	bl	80052e0 <USBD_CtlSendStatus>
    }
    break;
 80050fc:	e004      	b.n	8005108 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f842 	bl	800518a <USBD_CtlError>
    break;
 8005106:	e000      	b.n	800510a <USBD_ClrFeature+0x48>
    break;
 8005108:	bf00      	nop
  }
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785a      	ldrb	r2, [r3, #1]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3302      	adds	r3, #2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	b29a      	uxth	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	3303      	adds	r3, #3
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	b29b      	uxth	r3, r3
 8005140:	4413      	add	r3, r2
 8005142:	b29a      	uxth	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	3304      	adds	r3, #4
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b29a      	uxth	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	3305      	adds	r3, #5
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	b29b      	uxth	r3, r3
 800515c:	4413      	add	r3, r2
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	3306      	adds	r3, #6
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b29a      	uxth	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	3307      	adds	r3, #7
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	b29b      	uxth	r3, r3
 8005178:	4413      	add	r3, r2
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	80da      	strh	r2, [r3, #6]

}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005194:	2180      	movs	r1, #128	; 0x80
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fe7c 	bl	8005e94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800519c:	2100      	movs	r1, #0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fe78 	bl	8005e94 <USBD_LL_StallEP>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d033      	beq.n	800522a <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f835 	bl	8005232 <USBD_GetLen>
 80051c8:	4603      	mov	r3, r0
 80051ca:	3301      	adds	r3, #1
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	75fa      	strb	r2, [r7, #23]
 80051dc:	461a      	mov	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	8812      	ldrh	r2, [r2, #0]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	75fa      	strb	r2, [r7, #23]
 80051f0:	461a      	mov	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4413      	add	r3, r2
 80051f6:	2203      	movs	r2, #3
 80051f8:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80051fa:	e012      	b.n	8005222 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	75fa      	strb	r2, [r7, #23]
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1c59      	adds	r1, r3, #1
 800520c:	60f9      	str	r1, [r7, #12]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	75fa      	strb	r2, [r7, #23]
 8005218:	461a      	mov	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e8      	bne.n	80051fc <USBD_GetString+0x50>
    }
  } 
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800523e:	e005      	b.n	800524c <USBD_GetLen+0x1a>
    {
        len++;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	3301      	adds	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3301      	adds	r3, #1
 800524a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f5      	bne.n	8005240 <USBD_GetLen+0xe>
    }

    return len;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2202      	movs	r2, #2
 8005272:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	2100      	movs	r1, #0
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fecb 	bl	8006024 <USBD_LL_Transmit>
  
  return USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	2100      	movs	r1, #0
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 feb9 	bl	8006024 <USBD_LL_Transmit>
  
  return USBD_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	2100      	movs	r1, #0
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fee1 	bl	8006098 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2204      	movs	r2, #4
 80052ec:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80052f0:	2300      	movs	r3, #0
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fe94 	bl	8006024 <USBD_LL_Transmit>
  
  return USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2205      	movs	r2, #5
 8005312:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005316:	2300      	movs	r3, #0
 8005318:	2200      	movs	r2, #0
 800531a:	2100      	movs	r1, #0
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 febb 	bl	8006098 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <send_password>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void send_password()
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8005332:	2300      	movs	r3, #0
 8005334:	71fb      	strb	r3, [r7, #7]
	keyboardHID.key1 = KEY_BACKSPACE;
 8005336:	4b69      	ldr	r3, [pc, #420]	; (80054dc <send_password+0x1b0>)
 8005338:	222a      	movs	r2, #42	; 0x2a
 800533a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 800533c:	2205      	movs	r2, #5
 800533e:	4967      	ldr	r1, [pc, #412]	; (80054dc <send_password+0x1b0>)
 8005340:	4867      	ldr	r0, [pc, #412]	; (80054e0 <send_password+0x1b4>)
 8005342:	f7ff f8a1 	bl	8004488 <USBD_HID_SendReport>
	HAL_Delay(30);
 8005346:	201e      	movs	r0, #30
 8005348:	f7fa ff52 	bl	80001f0 <HAL_Delay>
	keyboardHID.key1 = 0;
 800534c:	4b63      	ldr	r3, [pc, #396]	; (80054dc <send_password+0x1b0>)
 800534e:	2200      	movs	r2, #0
 8005350:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8005352:	2205      	movs	r2, #5
 8005354:	4961      	ldr	r1, [pc, #388]	; (80054dc <send_password+0x1b0>)
 8005356:	4862      	ldr	r0, [pc, #392]	; (80054e0 <send_password+0x1b4>)
 8005358:	f7ff f896 	bl	8004488 <USBD_HID_SendReport>
	HAL_Delay(500);
 800535c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005360:	f7fa ff46 	bl	80001f0 <HAL_Delay>
	memset(RFID_to_send,0,30);
 8005364:	221e      	movs	r2, #30
 8005366:	2100      	movs	r1, #0
 8005368:	485e      	ldr	r0, [pc, #376]	; (80054e4 <send_password+0x1b8>)
 800536a:	f000 ffe9 	bl	8006340 <memset>

	for(i=0; i<9; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	71fb      	strb	r3, [r7, #7]
 8005372:	e045      	b.n	8005400 <send_password+0xd4>
	{
		if((RFID_buffer[i]%5==0) || (RFID_buffer[i]%7==0))
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	4a5c      	ldr	r2, [pc, #368]	; (80054e8 <send_password+0x1bc>)
 8005378:	5cd2      	ldrb	r2, [r2, r3]
 800537a:	4b5c      	ldr	r3, [pc, #368]	; (80054ec <send_password+0x1c0>)
 800537c:	fba3 1302 	umull	r1, r3, r3, r2
 8005380:	0899      	lsrs	r1, r3, #2
 8005382:	460b      	mov	r3, r1
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <send_password+0x86>
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	4a55      	ldr	r2, [pc, #340]	; (80054e8 <send_password+0x1bc>)
 8005394:	5cd2      	ldrb	r2, [r2, r3]
 8005396:	4b56      	ldr	r3, [pc, #344]	; (80054f0 <send_password+0x1c4>)
 8005398:	fba3 1302 	umull	r1, r3, r3, r2
 800539c:	1ad1      	subs	r1, r2, r3
 800539e:	0849      	lsrs	r1, r1, #1
 80053a0:	440b      	add	r3, r1
 80053a2:	0899      	lsrs	r1, r3, #2
 80053a4:	460b      	mov	r3, r1
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	1a5b      	subs	r3, r3, r1
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d111      	bne.n	80053d6 <send_password+0xaa>
			RFID_to_send[i]=RFID_buffer[i]%26 + 'A';
 80053b2:	79fa      	ldrb	r2, [r7, #7]
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	494c      	ldr	r1, [pc, #304]	; (80054e8 <send_password+0x1bc>)
 80053b8:	5ccb      	ldrb	r3, [r1, r3]
 80053ba:	494e      	ldr	r1, [pc, #312]	; (80054f4 <send_password+0x1c8>)
 80053bc:	fba1 0103 	umull	r0, r1, r1, r3
 80053c0:	08c9      	lsrs	r1, r1, #3
 80053c2:	201a      	movs	r0, #26
 80053c4:	fb00 f101 	mul.w	r1, r0, r1
 80053c8:	1a5b      	subs	r3, r3, r1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	3341      	adds	r3, #65	; 0x41
 80053ce:	b2d9      	uxtb	r1, r3
 80053d0:	4b44      	ldr	r3, [pc, #272]	; (80054e4 <send_password+0x1b8>)
 80053d2:	5499      	strb	r1, [r3, r2]
 80053d4:	e011      	b.n	80053fa <send_password+0xce>
		else
			RFID_to_send[i]=RFID_buffer[i]%10 + '0';
 80053d6:	79f8      	ldrb	r0, [r7, #7]
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4a43      	ldr	r2, [pc, #268]	; (80054e8 <send_password+0x1bc>)
 80053dc:	5cd2      	ldrb	r2, [r2, r3]
 80053de:	4b43      	ldr	r3, [pc, #268]	; (80054ec <send_password+0x1c0>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	08d9      	lsrs	r1, r3, #3
 80053e6:	460b      	mov	r3, r1
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	3330      	adds	r3, #48	; 0x30
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <send_password+0x1b8>)
 80053f8:	541a      	strb	r2, [r3, r0]
	for(i=0; i<9; i++)
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	3301      	adds	r3, #1
 80053fe:	71fb      	strb	r3, [r7, #7]
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d9b6      	bls.n	8005374 <send_password+0x48>

	}

	for(i=0; i<strlen(RFID_to_send); i++)
 8005406:	2300      	movs	r3, #0
 8005408:	71fb      	strb	r3, [r7, #7]
 800540a:	e038      	b.n	800547e <send_password+0x152>
	{
		if(RFID_to_send[i]>='A' && RFID_to_send[i]<='Z')
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	4a35      	ldr	r2, [pc, #212]	; (80054e4 <send_password+0x1b8>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d90c      	bls.n	8005430 <send_password+0x104>
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4a32      	ldr	r2, [pc, #200]	; (80054e4 <send_password+0x1b8>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	2b5a      	cmp	r3, #90	; 0x5a
 800541e:	d807      	bhi.n	8005430 <send_password+0x104>
			keyboardHID.key1 = RFID_to_send[i]-61;
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <send_password+0x1b8>)
 8005424:	5cd3      	ldrb	r3, [r2, r3]
 8005426:	3b3d      	subs	r3, #61	; 0x3d
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <send_password+0x1b0>)
 800542c:	709a      	strb	r2, [r3, #2]
 800542e:	e010      	b.n	8005452 <send_password+0x126>
		else if(RFID_to_send[i]>='0' && RFID_to_send[i]<='9')
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <send_password+0x1b8>)
 8005434:	5cd3      	ldrb	r3, [r2, r3]
 8005436:	2b2f      	cmp	r3, #47	; 0x2f
 8005438:	d90b      	bls.n	8005452 <send_password+0x126>
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <send_password+0x1b8>)
 800543e:	5cd3      	ldrb	r3, [r2, r3]
 8005440:	2b39      	cmp	r3, #57	; 0x39
 8005442:	d806      	bhi.n	8005452 <send_password+0x126>
			keyboardHID.key1 = RFID_to_send[i]-19;
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <send_password+0x1b8>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
 800544a:	3b13      	subs	r3, #19
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4b23      	ldr	r3, [pc, #140]	; (80054dc <send_password+0x1b0>)
 8005450:	709a      	strb	r2, [r3, #2]

		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8005452:	2205      	movs	r2, #5
 8005454:	4921      	ldr	r1, [pc, #132]	; (80054dc <send_password+0x1b0>)
 8005456:	4822      	ldr	r0, [pc, #136]	; (80054e0 <send_password+0x1b4>)
 8005458:	f7ff f816 	bl	8004488 <USBD_HID_SendReport>
		HAL_Delay(30);
 800545c:	201e      	movs	r0, #30
 800545e:	f7fa fec7 	bl	80001f0 <HAL_Delay>
		keyboardHID.key1 = 0;
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <send_password+0x1b0>)
 8005464:	2200      	movs	r2, #0
 8005466:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8005468:	2205      	movs	r2, #5
 800546a:	491c      	ldr	r1, [pc, #112]	; (80054dc <send_password+0x1b0>)
 800546c:	481c      	ldr	r0, [pc, #112]	; (80054e0 <send_password+0x1b4>)
 800546e:	f7ff f80b 	bl	8004488 <USBD_HID_SendReport>
		HAL_Delay(30);
 8005472:	201e      	movs	r0, #30
 8005474:	f7fa febc 	bl	80001f0 <HAL_Delay>
	for(i=0; i<strlen(RFID_to_send); i++)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	3301      	adds	r3, #1
 800547c:	71fb      	strb	r3, [r7, #7]
 800547e:	79fc      	ldrb	r4, [r7, #7]
 8005480:	4818      	ldr	r0, [pc, #96]	; (80054e4 <send_password+0x1b8>)
 8005482:	f7fa fe63 	bl	800014c <strlen>
 8005486:	4603      	mov	r3, r0
 8005488:	429c      	cmp	r4, r3
 800548a:	d3bf      	bcc.n	800540c <send_password+0xe0>
	}

	keyboardHID.key1 = KEY_ENTER;
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <send_password+0x1b0>)
 800548e:	2228      	movs	r2, #40	; 0x28
 8005490:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 8005492:	2205      	movs	r2, #5
 8005494:	4911      	ldr	r1, [pc, #68]	; (80054dc <send_password+0x1b0>)
 8005496:	4812      	ldr	r0, [pc, #72]	; (80054e0 <send_password+0x1b4>)
 8005498:	f7fe fff6 	bl	8004488 <USBD_HID_SendReport>
	HAL_Delay(30);
 800549c:	201e      	movs	r0, #30
 800549e:	f7fa fea7 	bl	80001f0 <HAL_Delay>
	keyboardHID.key1 = 0;
 80054a2:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <send_password+0x1b0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardHID, sizeof(struct keyboardHID_t));
 80054a8:	2205      	movs	r2, #5
 80054aa:	490c      	ldr	r1, [pc, #48]	; (80054dc <send_password+0x1b0>)
 80054ac:	480c      	ldr	r0, [pc, #48]	; (80054e0 <send_password+0x1b4>)
 80054ae:	f7fe ffeb 	bl	8004488 <USBD_HID_SendReport>
	HAL_Delay(30);
 80054b2:	201e      	movs	r0, #30
 80054b4:	f7fa fe9c 	bl	80001f0 <HAL_Delay>

	memset(RFID_to_send,0,30);
 80054b8:	221e      	movs	r2, #30
 80054ba:	2100      	movs	r1, #0
 80054bc:	4809      	ldr	r0, [pc, #36]	; (80054e4 <send_password+0x1b8>)
 80054be:	f000 ff3f 	bl	8006340 <memset>
	memset(RFID_buffer,0,30);
 80054c2:	221e      	movs	r2, #30
 80054c4:	2100      	movs	r1, #0
 80054c6:	4808      	ldr	r0, [pc, #32]	; (80054e8 <send_password+0x1bc>)
 80054c8:	f000 ff3a 	bl	8006340 <memset>
	FLAG=0;
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <send_password+0x1cc>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	bf00      	nop
 80054dc:	200001dc 	.word	0x200001dc
 80054e0:	20000204 	.word	0x20000204
 80054e4:	200001e4 	.word	0x200001e4
 80054e8:	200001bc 	.word	0x200001bc
 80054ec:	cccccccd 	.word	0xcccccccd
 80054f0:	24924925 	.word	0x24924925
 80054f4:	4ec4ec4f 	.word	0x4ec4ec4f
 80054f8:	2000011c 	.word	0x2000011c

080054fc <main>:
/* USER CODE END 0 */

int main(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 8005500:	f7fa fe2c 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005504:	f000 f844 	bl	8005590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005508:	f000 f920 	bl	800574c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800550c:	f000 f8f0 	bl	80056f0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8005510:	f000 faf4 	bl	8005afc <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8005514:	f000 f89e 	bl	8005654 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
	// HID Keyboard

	keyboardHID.id = 1;
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <main+0x7c>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
	keyboardHID.modifiers = 0;
 800551e:	4b16      	ldr	r3, [pc, #88]	; (8005578 <main+0x7c>)
 8005520:	2200      	movs	r2, #0
 8005522:	705a      	strb	r2, [r3, #1]
	keyboardHID.key1 = 0;
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <main+0x7c>)
 8005526:	2200      	movs	r2, #0
 8005528:	709a      	strb	r2, [r3, #2]
	keyboardHID.key2 = 0;
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <main+0x7c>)
 800552c:	2200      	movs	r2, #0
 800552e:	70da      	strb	r2, [r3, #3]
	keyboardHID.key3 = 0;
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <main+0x7c>)
 8005532:	2200      	movs	r2, #0
 8005534:	711a      	strb	r2, [r3, #4]
	// HID Media

	mediaHID.id = 2;
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <main+0x80>)
 8005538:	2202      	movs	r2, #2
 800553a:	701a      	strb	r2, [r3, #0]
	mediaHID.keys = 0;
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <main+0x80>)
 800553e:	2200      	movs	r2, #0
 8005540:	705a      	strb	r2, [r3, #1]

  HAL_Delay(500);
 8005542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005546:	f7fa fe53 	bl	80001f0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800554a:	2201      	movs	r2, #1
 800554c:	2108      	movs	r1, #8
 800554e:	480c      	ldr	r0, [pc, #48]	; (8005580 <main+0x84>)
 8005550:	f7fb f976 	bl	8000840 <HAL_GPIO_WritePin>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <main+0x88>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <main+0x88>)
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	68d2      	ldr	r2, [r2, #12]
 800555e:	f042 0220 	orr.w	r2, r2, #32
 8005562:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim4);
 8005564:	4808      	ldr	r0, [pc, #32]	; (8005588 <main+0x8c>)
 8005566:	f7fc fdac 	bl	80020c2 <HAL_TIM_Base_Start_IT>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(FLAG==1)
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <main+0x90>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d1fb      	bne.n	800556a <main+0x6e>
		  send_password();
 8005572:	f7ff fedb 	bl	800532c <send_password>
	  if(FLAG==1)
 8005576:	e7f8      	b.n	800556a <main+0x6e>
 8005578:	200001dc 	.word	0x200001dc
 800557c:	200001b8 	.word	0x200001b8
 8005580:	40010c00 	.word	0x40010c00
 8005584:	20000178 	.word	0x20000178
 8005588:	20000138 	.word	0x20000138
 800558c:	2000011c 	.word	0x2000011c

08005590 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b094      	sub	sp, #80	; 0x50
 8005594:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005596:	2301      	movs	r3, #1
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800559a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80055a0:	2300      	movs	r3, #0
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055a4:	2301      	movs	r3, #1
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055a8:	2302      	movs	r3, #2
 80055aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80055b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fc f895 	bl	80016ec <HAL_RCC_OscConfig>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80055c8:	21e2      	movs	r1, #226	; 0xe2
 80055ca:	4820      	ldr	r0, [pc, #128]	; (800564c <SystemClock_Config+0xbc>)
 80055cc:	f000 f90a 	bl	80057e4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055d0:	230f      	movs	r3, #15
 80055d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055d4:	2302      	movs	r3, #2
 80055d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055e6:	f107 0314 	add.w	r3, r7, #20
 80055ea:	2102      	movs	r1, #2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fc fae1 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 80055f8:	21f0      	movs	r1, #240	; 0xf0
 80055fa:	4814      	ldr	r0, [pc, #80]	; (800564c <SystemClock_Config+0xbc>)
 80055fc:	f000 f8f2 	bl	80057e4 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005600:	2310      	movs	r3, #16
 8005602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fc fc78 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <SystemClock_Config+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005616:	21f7      	movs	r1, #247	; 0xf7
 8005618:	480c      	ldr	r0, [pc, #48]	; (800564c <SystemClock_Config+0xbc>)
 800561a:	f000 f8e3 	bl	80057e4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800561e:	f7fc fc1f 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8005622:	4602      	mov	r2, r0
 8005624:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <SystemClock_Config+0xc0>)
 8005626:	fba3 2302 	umull	r2, r3, r3, r2
 800562a:	099b      	lsrs	r3, r3, #6
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa fef8 	bl	8000422 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005632:	2004      	movs	r0, #4
 8005634:	f7fa ff02 	bl	800043c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	f7fa fec5 	bl	80003ce <HAL_NVIC_SetPriority>
}
 8005644:	bf00      	nop
 8005646:	3750      	adds	r7, #80	; 0x50
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	0800637c 	.word	0x0800637c
 8005650:	10624dd3 	.word	0x10624dd3

08005654 <MX_TIM4_Init>:

/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 800565a:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <MX_TIM4_Init+0x90>)
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <MX_TIM4_Init+0x94>)
 800565e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <MX_TIM4_Init+0x90>)
 8005662:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8005666:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <MX_TIM4_Init+0x90>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <MX_TIM4_Init+0x90>)
 8005670:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005674:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005676:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <MX_TIM4_Init+0x90>)
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <MX_TIM4_Init+0x90>)
 800567e:	2200      	movs	r2, #0
 8005680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005682:	4818      	ldr	r0, [pc, #96]	; (80056e4 <MX_TIM4_Init+0x90>)
 8005684:	f7fc fcf2 	bl	800206c <HAL_TIM_Base_Init>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 800568e:	f240 1115 	movw	r1, #277	; 0x115
 8005692:	4816      	ldr	r0, [pc, #88]	; (80056ec <MX_TIM4_Init+0x98>)
 8005694:	f000 f8a6 	bl	80057e4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800569c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4619      	mov	r1, r3
 80056a4:	480f      	ldr	r0, [pc, #60]	; (80056e4 <MX_TIM4_Init+0x90>)
 80056a6:	f7fc fe2e 	bl	8002306 <HAL_TIM_ConfigClockSource>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <MX_TIM4_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80056b0:	f240 111b 	movw	r1, #283	; 0x11b
 80056b4:	480d      	ldr	r0, [pc, #52]	; (80056ec <MX_TIM4_Init+0x98>)
 80056b6:	f000 f895 	bl	80057e4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ba:	2300      	movs	r3, #0
 80056bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056c2:	463b      	mov	r3, r7
 80056c4:	4619      	mov	r1, r3
 80056c6:	4807      	ldr	r0, [pc, #28]	; (80056e4 <MX_TIM4_Init+0x90>)
 80056c8:	f7fd f831 	bl	800272e <HAL_TIMEx_MasterConfigSynchronization>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <MX_TIM4_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80056d2:	f44f 7191 	mov.w	r1, #290	; 0x122
 80056d6:	4805      	ldr	r0, [pc, #20]	; (80056ec <MX_TIM4_Init+0x98>)
 80056d8:	f000 f884 	bl	80057e4 <_Error_Handler>
  }

}
 80056dc:	bf00      	nop
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000138 	.word	0x20000138
 80056e8:	40000800 	.word	0x40000800
 80056ec:	0800637c 	.word	0x0800637c

080056f0 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <MX_USART3_UART_Init+0x50>)
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <MX_USART3_UART_Init+0x54>)
 80056f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <MX_USART3_UART_Init+0x50>)
 80056fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <MX_USART3_UART_Init+0x50>)
 8005704:	2200      	movs	r2, #0
 8005706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <MX_USART3_UART_Init+0x50>)
 800570a:	2200      	movs	r2, #0
 800570c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <MX_USART3_UART_Init+0x50>)
 8005710:	2200      	movs	r2, #0
 8005712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <MX_USART3_UART_Init+0x50>)
 8005716:	220c      	movs	r2, #12
 8005718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <MX_USART3_UART_Init+0x50>)
 800571c:	2200      	movs	r2, #0
 800571e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <MX_USART3_UART_Init+0x50>)
 8005722:	2200      	movs	r2, #0
 8005724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005726:	4806      	ldr	r0, [pc, #24]	; (8005740 <MX_USART3_UART_Init+0x50>)
 8005728:	f7fd f857 	bl	80027da <HAL_UART_Init>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <MX_USART3_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005732:	f240 1135 	movw	r1, #309	; 0x135
 8005736:	4804      	ldr	r0, [pc, #16]	; (8005748 <MX_USART3_UART_Init+0x58>)
 8005738:	f000 f854 	bl	80057e4 <_Error_Handler>
  }

}
 800573c:	bf00      	nop
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000178 	.word	0x20000178
 8005744:	40004800 	.word	0x40004800
 8005748:	0800637c 	.word	0x0800637c

0800574c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005752:	4a22      	ldr	r2, [pc, #136]	; (80057dc <MX_GPIO_Init+0x90>)
 8005754:	4b21      	ldr	r3, [pc, #132]	; (80057dc <MX_GPIO_Init+0x90>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f043 0320 	orr.w	r3, r3, #32
 800575c:	6193      	str	r3, [r2, #24]
 800575e:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <MX_GPIO_Init+0x90>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800576a:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <MX_GPIO_Init+0x90>)
 800576c:	4b1b      	ldr	r3, [pc, #108]	; (80057dc <MX_GPIO_Init+0x90>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	6193      	str	r3, [r2, #24]
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <MX_GPIO_Init+0x90>)
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <MX_GPIO_Init+0x90>)
 8005784:	4b15      	ldr	r3, [pc, #84]	; (80057dc <MX_GPIO_Init+0x90>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	6193      	str	r3, [r2, #24]
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <MX_GPIO_Init+0x90>)
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800579a:	2200      	movs	r2, #0
 800579c:	2108      	movs	r1, #8
 800579e:	4810      	ldr	r0, [pc, #64]	; (80057e0 <MX_GPIO_Init+0x94>)
 80057a0:	f7fb f84e 	bl	8000840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80057a4:	2302      	movs	r3, #2
 80057a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057ac:	2301      	movs	r3, #1
 80057ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	4619      	mov	r1, r3
 80057b6:	480a      	ldr	r0, [pc, #40]	; (80057e0 <MX_GPIO_Init+0x94>)
 80057b8:	f7fa fee4 	bl	8000584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80057bc:	2308      	movs	r3, #8
 80057be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057c4:	2302      	movs	r3, #2
 80057c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	4619      	mov	r1, r3
 80057ce:	4804      	ldr	r0, [pc, #16]	; (80057e0 <MX_GPIO_Init+0x94>)
 80057d0:	f7fa fed8 	bl	8000584 <HAL_GPIO_Init>

}
 80057d4:	bf00      	nop
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40010c00 	.word	0x40010c00

080057e4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80057ee:	e7fe      	b.n	80057ee <_Error_Handler+0xa>

080057f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80057f6:	4a24      	ldr	r2, [pc, #144]	; (8005888 <HAL_MspInit+0x98>)
 80057f8:	4b23      	ldr	r3, [pc, #140]	; (8005888 <HAL_MspInit+0x98>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6193      	str	r3, [r2, #24]
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <HAL_MspInit+0x98>)
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	607b      	str	r3, [r7, #4]
 800580c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800580e:	2003      	movs	r0, #3
 8005810:	f7fa fdd2 	bl	80003b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	2100      	movs	r1, #0
 8005818:	f06f 000b 	mvn.w	r0, #11
 800581c:	f7fa fdd7 	bl	80003ce <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005820:	2200      	movs	r2, #0
 8005822:	2100      	movs	r1, #0
 8005824:	f06f 000a 	mvn.w	r0, #10
 8005828:	f7fa fdd1 	bl	80003ce <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800582c:	2200      	movs	r2, #0
 800582e:	2100      	movs	r1, #0
 8005830:	f06f 0009 	mvn.w	r0, #9
 8005834:	f7fa fdcb 	bl	80003ce <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005838:	2200      	movs	r2, #0
 800583a:	2100      	movs	r1, #0
 800583c:	f06f 0004 	mvn.w	r0, #4
 8005840:	f7fa fdc5 	bl	80003ce <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	f06f 0003 	mvn.w	r0, #3
 800584c:	f7fa fdbf 	bl	80003ce <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	f06f 0001 	mvn.w	r0, #1
 8005858:	f7fa fdb9 	bl	80003ce <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	f7fa fdb3 	bl	80003ce <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <HAL_MspInit+0x9c>)
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <HAL_MspInit+0x9c>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005872:	6053      	str	r3, [r2, #4]
 8005874:	4a05      	ldr	r2, [pc, #20]	; (800588c <HAL_MspInit+0x9c>)
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_MspInit+0x9c>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800587e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000
 800588c:	40010000 	.word	0x40010000

08005890 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM4)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <HAL_TIM_Base_MspInit+0x44>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d113      	bne.n	80058ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_TIM_Base_MspInit+0x48>)
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <HAL_TIM_Base_MspInit+0x48>)
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	61d3      	str	r3, [r2, #28]
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_TIM_Base_MspInit+0x48>)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80058ba:	2200      	movs	r2, #0
 80058bc:	2100      	movs	r1, #0
 80058be:	201e      	movs	r0, #30
 80058c0:	f7fa fd85 	bl	80003ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80058c4:	201e      	movs	r0, #30
 80058c6:	f7fa fd9e 	bl	8000406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40021000 	.word	0x40021000

080058dc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <HAL_UART_MspInit+0x78>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d12d      	bne.n	800594a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80058ee:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <HAL_UART_MspInit+0x7c>)
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_UART_MspInit+0x7c>)
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f8:	61d3      	str	r3, [r2, #28]
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_UART_MspInit+0x7c>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	2302      	movs	r3, #2
 800590e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005910:	2303      	movs	r3, #3
 8005912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005914:	f107 0310 	add.w	r3, r7, #16
 8005918:	4619      	mov	r1, r3
 800591a:	4810      	ldr	r0, [pc, #64]	; (800595c <HAL_UART_MspInit+0x80>)
 800591c:	f7fa fe32 	bl	8000584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005924:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592e:	f107 0310 	add.w	r3, r7, #16
 8005932:	4619      	mov	r1, r3
 8005934:	4809      	ldr	r0, [pc, #36]	; (800595c <HAL_UART_MspInit+0x80>)
 8005936:	f7fa fe25 	bl	8000584 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800593a:	2200      	movs	r2, #0
 800593c:	2100      	movs	r1, #0
 800593e:	2027      	movs	r0, #39	; 0x27
 8005940:	f7fa fd45 	bl	80003ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005944:	2027      	movs	r0, #39	; 0x27
 8005946:	f7fa fd5e 	bl	8000406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800594a:	bf00      	nop
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40004800 	.word	0x40004800
 8005958:	40021000 	.word	0x40021000
 800595c:	40010c00 	.word	0x40010c00

08005960 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005970:	e7fe      	b.n	8005970 <HardFault_Handler+0x4>

08005972 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005976:	e7fe      	b.n	8005976 <MemManage_Handler+0x4>

08005978 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800597c:	e7fe      	b.n	800597c <BusFault_Handler+0x4>

0800597e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800597e:	b480      	push	{r7}
 8005980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005982:	e7fe      	b.n	8005982 <UsageFault_Handler+0x4>

08005984 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059ac:	f7fa fc08 	bl	80001c0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80059b0:	f7fa fd60 	bl	8000474 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059b4:	bf00      	nop
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80059bc:	4802      	ldr	r0, [pc, #8]	; (80059c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80059be:	f7fb f857 	bl	8000a70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80059c2:	bf00      	nop
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000428 	.word	0x20000428

080059cc <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80059d0:	4814      	ldr	r0, [pc, #80]	; (8005a24 <TIM4_IRQHandler+0x58>)
 80059d2:	f7fc fb90 	bl	80020f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  if(RFID_flag==1)
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <TIM4_IRQHandler+0x5c>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d105      	bne.n	80059ea <TIM4_IRQHandler+0x1e>
	  RFID_200ms_counter++;
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <TIM4_IRQHandler+0x60>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <TIM4_IRQHandler+0x60>)
 80059e8:	701a      	strb	r2, [r3, #0]

  if(RFID_200ms_counter>=2)
 80059ea:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <TIM4_IRQHandler+0x60>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d915      	bls.n	8005a1e <TIM4_IRQHandler+0x52>
  {
	  RFID_flag=0;
 80059f2:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <TIM4_IRQHandler+0x5c>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
	  RFID_200ms_counter=0;
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <TIM4_IRQHandler+0x60>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
	  if(RFID_cnt>7)
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <TIM4_IRQHandler+0x64>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	d903      	bls.n	8005a0e <TIM4_IRQHandler+0x42>
		  FLAG=1;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <TIM4_IRQHandler+0x68>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e004      	b.n	8005a18 <TIM4_IRQHandler+0x4c>
	  else
		  memset(RFID_buffer,0,30);
 8005a0e:	221e      	movs	r2, #30
 8005a10:	2100      	movs	r1, #0
 8005a12:	4809      	ldr	r0, [pc, #36]	; (8005a38 <TIM4_IRQHandler+0x6c>)
 8005a14:	f000 fc94 	bl	8006340 <memset>
	  RFID_cnt=0;
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <TIM4_IRQHandler+0x64>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8005a1e:	bf00      	nop
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000138 	.word	0x20000138
 8005a28:	2000011a 	.word	0x2000011a
 8005a2c:	20000119 	.word	0x20000119
 8005a30:	2000011b 	.word	0x2000011b
 8005a34:	2000011c 	.word	0x2000011c
 8005a38:	200001bc 	.word	0x200001bc

08005a3c <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005a40:	480f      	ldr	r0, [pc, #60]	; (8005a80 <USART3_IRQHandler+0x44>)
 8005a42:	f7fc ffbd 	bl	80029c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive(&huart3,(uint8_t *) &RFID_buffer[RFID_cnt], 1,20);
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <USART3_IRQHandler+0x48>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <USART3_IRQHandler+0x4c>)
 8005a4e:	18d1      	adds	r1, r2, r3
 8005a50:	2314      	movs	r3, #20
 8005a52:	2201      	movs	r2, #1
 8005a54:	480a      	ldr	r0, [pc, #40]	; (8005a80 <USART3_IRQHandler+0x44>)
 8005a56:	f7fc ff0d 	bl	8002874 <HAL_UART_Receive>
  if(RFID_cnt<29)
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <USART3_IRQHandler+0x48>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b1c      	cmp	r3, #28
 8005a60:	d805      	bhi.n	8005a6e <USART3_IRQHandler+0x32>
	  RFID_cnt++;
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <USART3_IRQHandler+0x48>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <USART3_IRQHandler+0x48>)
 8005a6c:	701a      	strb	r2, [r3, #0]
  RFID_flag=1;
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <USART3_IRQHandler+0x50>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
  RFID_200ms_counter=0;
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <USART3_IRQHandler+0x54>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 1 */
}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000178 	.word	0x20000178
 8005a84:	2000011b 	.word	0x2000011b
 8005a88:	200001bc 	.word	0x200001bc
 8005a8c:	2000011a 	.word	0x2000011a
 8005a90:	20000119 	.word	0x20000119

08005a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <SystemInit+0x5c>)
 8005a9a:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <SystemInit+0x5c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005aa4:	4912      	ldr	r1, [pc, #72]	; (8005af0 <SystemInit+0x5c>)
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <SystemInit+0x5c>)
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <SystemInit+0x60>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005ab0:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <SystemInit+0x5c>)
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <SystemInit+0x5c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <SystemInit+0x5c>)
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <SystemInit+0x5c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005acc:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <SystemInit+0x5c>)
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <SystemInit+0x5c>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005ad6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <SystemInit+0x5c>)
 8005ada:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005ade:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <SystemInit+0x64>)
 8005ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ae6:	609a      	str	r2, [r3, #8]
#endif 
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	40021000 	.word	0x40021000
 8005af4:	f8ff0000 	.word	0xf8ff0000
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005b00:	2200      	movs	r2, #0
 8005b02:	4906      	ldr	r1, [pc, #24]	; (8005b1c <MX_USB_DEVICE_Init+0x20>)
 8005b04:	4806      	ldr	r0, [pc, #24]	; (8005b20 <MX_USB_DEVICE_Init+0x24>)
 8005b06:	f7fe fd13 	bl	8004530 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8005b0a:	4906      	ldr	r1, [pc, #24]	; (8005b24 <MX_USB_DEVICE_Init+0x28>)
 8005b0c:	4804      	ldr	r0, [pc, #16]	; (8005b20 <MX_USB_DEVICE_Init+0x24>)
 8005b0e:	f7fe fd3a 	bl	8004586 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8005b12:	4803      	ldr	r0, [pc, #12]	; (8005b20 <MX_USB_DEVICE_Init+0x24>)
 8005b14:	f7fe fd50 	bl	80045b8 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b18:	bf00      	nop
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	200000c8 	.word	0x200000c8
 8005b20:	20000204 	.word	0x20000204
 8005b24:	20000000 	.word	0x20000000

08005b28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <HAL_PCD_MspInit+0x44>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d113      	bne.n	8005b62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <HAL_PCD_MspInit+0x48>)
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_PCD_MspInit+0x48>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b44:	61d3      	str	r3, [r2, #28]
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <HAL_PCD_MspInit+0x48>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	2014      	movs	r0, #20
 8005b58:	f7fa fc39 	bl	80003ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005b5c:	2014      	movs	r0, #20
 8005b5e:	f7fa fc52 	bl	8000406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40005c00 	.word	0x40005c00
 8005b70:	40021000 	.word	0x40021000

08005b74 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fe fd5c 	bl	8004648 <USBD_LL_SetupStage>
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7fe fd8e 	bl	80046dc <USBD_LL_DataOutStage>
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	015b      	lsls	r3, r3, #5
 8005be0:	4413      	add	r3, r2
 8005be2:	333c      	adds	r3, #60	; 0x3c
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fe fdd2 	bl	8004792 <USBD_LL_DataInStage>
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe feb5 	bl	8004974 <USBD_LL_SOF>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d102      	bne.n	8005c2c <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
    break;
 8005c2a:	e002      	b.n	8005c32 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
    break;    
 8005c30:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c38:	7bfa      	ldrb	r2, [r7, #15]
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe fe66 	bl	800490e <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fe31 	bl	80048b0 <USBD_LL_Reset>
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fe60 	bl	800492c <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <HAL_PCD_SuspendCallback+0x30>)
 8005c76:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <HAL_PCD_SuspendCallback+0x30>)
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f043 0306 	orr.w	r3, r3, #6
 8005c7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fe5a 	bl	8004954 <USBD_LL_Resume>
  
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8005cb0:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cbc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <USBD_LL_Init+0x98>)
 8005cc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cc8:	2208      	movs	r2, #8
 8005cca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cce:	2202      	movs	r2, #2
 8005cd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <USBD_LL_Init+0x94>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005ce4:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <USBD_LL_Init+0x94>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005cea:	4814      	ldr	r0, [pc, #80]	; (8005d3c <USBD_LL_Init+0x94>)
 8005cec:	f7fa fdc0 	bl	8000870 <HAL_PCD_Init>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005cf6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8005cfa:	4812      	ldr	r0, [pc, #72]	; (8005d44 <USBD_LL_Init+0x9c>)
 8005cfc:	f7ff fd72 	bl	80057e4 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005d06:	2318      	movs	r3, #24
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f7fb fcb0 	bl	8001670 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005d16:	2358      	movs	r3, #88	; 0x58
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	f7fb fca8 	bl	8001670 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2181      	movs	r1, #129	; 0x81
 8005d2e:	f7fb fc9f 	bl	8001670 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000428 	.word	0x20000428
 8005d40:	40005c00 	.word	0x40005c00
 8005d44:	0800638c 	.word	0x0800638c

08005d48 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fe60 	bl	8000a24 <HAL_PCD_Start>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d816      	bhi.n	8005d9c <USBD_LL_Start+0x54>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <USBD_LL_Start+0x2c>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d8b 	.word	0x08005d8b
 8005d7c:	08005d91 	.word	0x08005d91
 8005d80:	08005d97 	.word	0x08005d97
    case HAL_OK :
      usb_status = USBD_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]
    break;
 8005d88:	e00b      	b.n	8005da2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8005d8e:	e008      	b.n	8005da2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
    break;
 8005d94:	e005      	b.n	8005da2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d96:	2302      	movs	r3, #2
 8005d98:	73fb      	strb	r3, [r7, #15]
    break;
 8005d9a:	e002      	b.n	8005da2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8005da0:	bf00      	nop
  }
  return usb_status;  
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	70fb      	strb	r3, [r7, #3]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70bb      	strb	r3, [r7, #2]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005dd4:	78bb      	ldrb	r3, [r7, #2]
 8005dd6:	883a      	ldrh	r2, [r7, #0]
 8005dd8:	78f9      	ldrb	r1, [r7, #3]
 8005dda:	f7fa ff70 	bl	8000cbe <HAL_PCD_EP_Open>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d817      	bhi.n	8005e18 <USBD_LL_OpenEP+0x6c>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <USBD_LL_OpenEP+0x44>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e07 	.word	0x08005e07
 8005df8:	08005e0d 	.word	0x08005e0d
 8005dfc:	08005e13 	.word	0x08005e13
    case HAL_OK :
      usb_status = USBD_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
    break;
 8005e04:	e00b      	b.n	8005e1e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e06:	2302      	movs	r3, #2
 8005e08:	73fb      	strb	r3, [r7, #15]
    break;
 8005e0a:	e008      	b.n	8005e1e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e10:	e005      	b.n	8005e1e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e12:	2302      	movs	r3, #2
 8005e14:	73fb      	strb	r3, [r7, #15]
    break;
 8005e16:	e002      	b.n	8005e1e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e1c:	bf00      	nop
  }
  return usb_status; 
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	4611      	mov	r1, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fa ff8e 	bl	8000d68 <HAL_PCD_EP_Close>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d816      	bhi.n	8005e84 <USBD_LL_CloseEP+0x5c>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <USBD_LL_CloseEP+0x34>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e6d 	.word	0x08005e6d
 8005e60:	08005e73 	.word	0x08005e73
 8005e64:	08005e79 	.word	0x08005e79
 8005e68:	08005e7f 	.word	0x08005e7f
    case HAL_OK :
      usb_status = USBD_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e70:	e00b      	b.n	8005e8a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e72:	2302      	movs	r3, #2
 8005e74:	73fb      	strb	r3, [r7, #15]
    break;
 8005e76:	e008      	b.n	8005e8a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e7c:	e005      	b.n	8005e8a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	73fb      	strb	r3, [r7, #15]
    break;
 8005e82:	e002      	b.n	8005e8a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8005e84:	2302      	movs	r3, #2
 8005e86:	73fb      	strb	r3, [r7, #15]
    break;
 8005e88:	bf00      	nop
  }
  return usb_status;  
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fb f815 	bl	8000ee2 <HAL_PCD_EP_SetStall>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d816      	bhi.n	8005ef0 <USBD_LL_StallEP+0x5c>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <USBD_LL_StallEP+0x34>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005edf 	.word	0x08005edf
 8005ed0:	08005ee5 	.word	0x08005ee5
 8005ed4:	08005eeb 	.word	0x08005eeb
    case HAL_OK :
      usb_status = USBD_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]
    break;
 8005edc:	e00b      	b.n	8005ef6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8005ee2:	e008      	b.n	8005ef6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ee8:	e005      	b.n	8005ef6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005eea:	2302      	movs	r3, #2
 8005eec:	73fb      	strb	r3, [r7, #15]
    break;
 8005eee:	e002      	b.n	8005ef6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ef4:	bf00      	nop
  }
  return usb_status;  
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fb f834 	bl	8000f8c <HAL_PCD_EP_ClrStall>
 8005f24:	4603      	mov	r3, r0
 8005f26:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d816      	bhi.n	8005f5c <USBD_LL_ClearStallEP+0x5c>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <USBD_LL_ClearStallEP+0x34>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f4b 	.word	0x08005f4b
 8005f3c:	08005f51 	.word	0x08005f51
 8005f40:	08005f57 	.word	0x08005f57
    case HAL_OK :
      usb_status = USBD_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]
    break;
 8005f48:	e00b      	b.n	8005f62 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8005f4e:	e008      	b.n	8005f62 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
    break;
 8005f54:	e005      	b.n	8005f62 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f56:	2302      	movs	r3, #2
 8005f58:	73fb      	strb	r3, [r7, #15]
    break;
 8005f5a:	e002      	b.n	8005f62 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f60:	bf00      	nop
  }
  return usb_status; 
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005f7e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da08      	bge.n	8005f9a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	015b      	lsls	r3, r3, #5
 8005f92:	4413      	add	r3, r2
 8005f94:	332a      	adds	r3, #42	; 0x2a
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	e008      	b.n	8005fac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	015b      	lsls	r3, r3, #5
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f203 232a 	addw	r3, r3, #554	; 0x22a
 8005faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr
	...

08005fb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fe4c 	bl	8000c74 <HAL_PCD_SetAddress>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d816      	bhi.n	8006014 <USBD_LL_SetUSBAddress+0x5c>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <USBD_LL_SetUSBAddress+0x34>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	08006003 	.word	0x08006003
 8005ff4:	08006009 	.word	0x08006009
 8005ff8:	0800600f 	.word	0x0800600f
    case HAL_OK :
      usb_status = USBD_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8006000:	e00b      	b.n	800601a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006002:	2302      	movs	r3, #2
 8006004:	73fb      	strb	r3, [r7, #15]
    break;
 8006006:	e008      	b.n	800601a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
    break;
 800600c:	e005      	b.n	800601a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800600e:	2302      	movs	r3, #2
 8006010:	73fb      	strb	r3, [r7, #15]
    break;
 8006012:	e002      	b.n	800601a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006014:	2302      	movs	r3, #2
 8006016:	73fb      	strb	r3, [r7, #15]
    break;
 8006018:	bf00      	nop
  }
  return usb_status;  
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	461a      	mov	r2, r3
 8006030:	460b      	mov	r3, r1
 8006032:	72fb      	strb	r3, [r7, #11]
 8006034:	4613      	mov	r3, r2
 8006036:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006046:	893b      	ldrh	r3, [r7, #8]
 8006048:	7af9      	ldrb	r1, [r7, #11]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	f7fa ff0e 	bl	8000e6c <HAL_PCD_EP_Transmit>
 8006050:	4603      	mov	r3, r0
 8006052:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006054:	7dbb      	ldrb	r3, [r7, #22]
 8006056:	2b03      	cmp	r3, #3
 8006058:	d816      	bhi.n	8006088 <USBD_LL_Transmit+0x64>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <USBD_LL_Transmit+0x3c>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006071 	.word	0x08006071
 8006064:	08006077 	.word	0x08006077
 8006068:	0800607d 	.word	0x0800607d
 800606c:	08006083 	.word	0x08006083
    case HAL_OK :
      usb_status = USBD_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	75fb      	strb	r3, [r7, #23]
    break;
 8006074:	e00b      	b.n	800608e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006076:	2302      	movs	r3, #2
 8006078:	75fb      	strb	r3, [r7, #23]
    break;
 800607a:	e008      	b.n	800608e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800607c:	2301      	movs	r3, #1
 800607e:	75fb      	strb	r3, [r7, #23]
    break;
 8006080:	e005      	b.n	800608e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006082:	2302      	movs	r3, #2
 8006084:	75fb      	strb	r3, [r7, #23]
    break;
 8006086:	e002      	b.n	800608e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006088:	2302      	movs	r3, #2
 800608a:	75fb      	strb	r3, [r7, #23]
    break;
 800608c:	bf00      	nop
  }
  return usb_status;    
 800608e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	72fb      	strb	r3, [r7, #11]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80060ba:	893b      	ldrh	r3, [r7, #8]
 80060bc:	7af9      	ldrb	r1, [r7, #11]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	f7fa fe98 	bl	8000df4 <HAL_PCD_EP_Receive>
 80060c4:	4603      	mov	r3, r0
 80060c6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80060c8:	7dbb      	ldrb	r3, [r7, #22]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d816      	bhi.n	80060fc <USBD_LL_PrepareReceive+0x64>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <USBD_LL_PrepareReceive+0x3c>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060eb 	.word	0x080060eb
 80060dc:	080060f1 	.word	0x080060f1
 80060e0:	080060f7 	.word	0x080060f7
    case HAL_OK :
      usb_status = USBD_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
    break;
 80060e8:	e00b      	b.n	8006102 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80060ea:	2302      	movs	r3, #2
 80060ec:	75fb      	strb	r3, [r7, #23]
    break;
 80060ee:	e008      	b.n	8006102 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80060f0:	2301      	movs	r3, #1
 80060f2:	75fb      	strb	r3, [r7, #23]
    break;
 80060f4:	e005      	b.n	8006102 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80060f6:	2302      	movs	r3, #2
 80060f8:	75fb      	strb	r3, [r7, #23]
    break;
 80060fa:	e002      	b.n	8006102 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80060fc:	2302      	movs	r3, #2
 80060fe:	75fb      	strb	r3, [r7, #23]
    break;
 8006100:	bf00      	nop
  }
  return usb_status; 
 8006102:	7dfb      	ldrb	r3, [r7, #23]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006114:	4b02      	ldr	r3, [pc, #8]	; (8006120 <USBD_static_malloc+0x14>)
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr
 8006120:	20000120 	.word	0x20000120

08006124 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 5 */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2212      	movs	r2, #18
 800615c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800615e:	4b03      	ldr	r3, [pc, #12]	; (800616c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	200000e4 	.word	0x200000e4

08006170 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2204      	movs	r2, #4
 8006180:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006182:	4b03      	ldr	r3, [pc, #12]	; (8006190 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	200000f8 	.word	0x200000f8

08006194 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	6039      	str	r1, [r7, #0]
 800619e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	4907      	ldr	r1, [pc, #28]	; (80061c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80061aa:	4808      	ldr	r0, [pc, #32]	; (80061cc <USBD_FS_ProductStrDescriptor+0x38>)
 80061ac:	f7fe fffe 	bl	80051ac <USBD_GetString>
 80061b0:	e004      	b.n	80061bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	4904      	ldr	r1, [pc, #16]	; (80061c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80061b6:	4805      	ldr	r0, [pc, #20]	; (80061cc <USBD_FS_ProductStrDescriptor+0x38>)
 80061b8:	f7fe fff8 	bl	80051ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000888 	.word	0x20000888
 80061cc:	080063a0 	.word	0x080063a0

080061d0 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	4904      	ldr	r1, [pc, #16]	; (80061f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061e0:	4804      	ldr	r0, [pc, #16]	; (80061f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061e2:	f7fe ffe3 	bl	80051ac <USBD_GetString>
  return USBD_StrDesc;
 80061e6:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000888 	.word	0x20000888
 80061f4:	080063b8 	.word	0x080063b8

080061f8 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	6039      	str	r1, [r7, #0]
 8006202:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	4907      	ldr	r1, [pc, #28]	; (800622c <USBD_FS_SerialStrDescriptor+0x34>)
 800620e:	4808      	ldr	r0, [pc, #32]	; (8006230 <USBD_FS_SerialStrDescriptor+0x38>)
 8006210:	f7fe ffcc 	bl	80051ac <USBD_GetString>
 8006214:	e004      	b.n	8006220 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	4904      	ldr	r1, [pc, #16]	; (800622c <USBD_FS_SerialStrDescriptor+0x34>)
 800621a:	4805      	ldr	r0, [pc, #20]	; (8006230 <USBD_FS_SerialStrDescriptor+0x38>)
 800621c:	f7fe ffc6 	bl	80051ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8006220:	4b02      	ldr	r3, [pc, #8]	; (800622c <USBD_FS_SerialStrDescriptor+0x34>)
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000888 	.word	0x20000888
 8006230:	080063cc 	.word	0x080063cc

08006234 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	6039      	str	r1, [r7, #0]
 800623e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	4907      	ldr	r1, [pc, #28]	; (8006268 <USBD_FS_ConfigStrDescriptor+0x34>)
 800624a:	4808      	ldr	r0, [pc, #32]	; (800626c <USBD_FS_ConfigStrDescriptor+0x38>)
 800624c:	f7fe ffae 	bl	80051ac <USBD_GetString>
 8006250:	e004      	b.n	800625c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	4904      	ldr	r1, [pc, #16]	; (8006268 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006256:	4805      	ldr	r0, [pc, #20]	; (800626c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006258:	f7fe ffa8 	bl	80051ac <USBD_GetString>
  }
  return USBD_StrDesc;  
 800625c:	4b02      	ldr	r3, [pc, #8]	; (8006268 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000888 	.word	0x20000888
 800626c:	080063dc 	.word	0x080063dc

08006270 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	6039      	str	r1, [r7, #0]
 800627a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	4907      	ldr	r1, [pc, #28]	; (80062a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006286:	4808      	ldr	r0, [pc, #32]	; (80062a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006288:	f7fe ff90 	bl	80051ac <USBD_GetString>
 800628c:	e004      	b.n	8006298 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	4904      	ldr	r1, [pc, #16]	; (80062a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006292:	4805      	ldr	r0, [pc, #20]	; (80062a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006294:	f7fe ff8a 	bl	80051ac <USBD_GetString>
  }
  return USBD_StrDesc;  
 8006298:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000888 	.word	0x20000888
 80062a8:	080063e8 	.word	0x080063e8

080062ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80062ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80062ae:	e003      	b.n	80062b8 <LoopCopyDataInit>

080062b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80062b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80062b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80062b6:	3104      	adds	r1, #4

080062b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80062b8:	480a      	ldr	r0, [pc, #40]	; (80062e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80062bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80062be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80062c0:	d3f6      	bcc.n	80062b0 <CopyDataInit>
  ldr r2, =_sbss
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80062c4:	e002      	b.n	80062cc <LoopFillZerobss>

080062c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80062c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80062c8:	f842 3b04 	str.w	r3, [r2], #4

080062cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80062ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80062d0:	d3f9      	bcc.n	80062c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80062d2:	f7ff fbdf 	bl	8005a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062d6:	f000 f80f 	bl	80062f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062da:	f7ff f90f 	bl	80054fc <main>
  bx lr
 80062de:	4770      	bx	lr
  ldr r3, =_sidata
 80062e0:	08006418 	.word	0x08006418
  ldr r0, =_sdata
 80062e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80062e8:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 80062ec:	200000fc 	.word	0x200000fc
  ldr r3, = _ebss
 80062f0:	20000a88 	.word	0x20000a88

080062f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062f4:	e7fe      	b.n	80062f4 <ADC1_2_IRQHandler>
	...

080062f8 <__libc_init_array>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	2500      	movs	r5, #0
 80062fc:	4e0c      	ldr	r6, [pc, #48]	; (8006330 <__libc_init_array+0x38>)
 80062fe:	4c0d      	ldr	r4, [pc, #52]	; (8006334 <__libc_init_array+0x3c>)
 8006300:	1ba4      	subs	r4, r4, r6
 8006302:	10a4      	asrs	r4, r4, #2
 8006304:	42a5      	cmp	r5, r4
 8006306:	d109      	bne.n	800631c <__libc_init_array+0x24>
 8006308:	f000 f822 	bl	8006350 <_init>
 800630c:	2500      	movs	r5, #0
 800630e:	4e0a      	ldr	r6, [pc, #40]	; (8006338 <__libc_init_array+0x40>)
 8006310:	4c0a      	ldr	r4, [pc, #40]	; (800633c <__libc_init_array+0x44>)
 8006312:	1ba4      	subs	r4, r4, r6
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	42a5      	cmp	r5, r4
 8006318:	d105      	bne.n	8006326 <__libc_init_array+0x2e>
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006320:	4798      	blx	r3
 8006322:	3501      	adds	r5, #1
 8006324:	e7ee      	b.n	8006304 <__libc_init_array+0xc>
 8006326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800632a:	4798      	blx	r3
 800632c:	3501      	adds	r5, #1
 800632e:	e7f2      	b.n	8006316 <__libc_init_array+0x1e>
 8006330:	08006410 	.word	0x08006410
 8006334:	08006410 	.word	0x08006410
 8006338:	08006410 	.word	0x08006410
 800633c:	08006414 	.word	0x08006414

08006340 <memset>:
 8006340:	4603      	mov	r3, r0
 8006342:	4402      	add	r2, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
